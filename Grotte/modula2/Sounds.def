DEFINITION MODULE Sounds;

 FROM SYSTEM IMPORT ADDRESS;
 FROM Memory IMPORT TagItem, TagItemPtr, tagUser, CARD16, INT16, CARD32, INT32;


 TYPE
  ChannelPtr;

 VAR
  noChan: ChannelPtr;

 CONST (* tags *)
  sLENGTH = tagUser + 0; (* CARD16 *)
  sWAVE = tagUser + 1;
  sOFFSET = tagUser + 2;
  sDURATION = tagUser + 4; (* duration of the sound, in /1024sec *)
  sDISTANCE = tagUser + 6; (* may auto. overwrite sFM & sAM when changed *)
   (* CARD32, centimeters *)
  sNOTE = tagUser + 8; (* 1..127  72 -> 440Hz  *)
  sFREQ = tagUser + 9; (* in Hz *) (* CARD16 *)
  sRATE = tagUser + 10; (* in byte / sec *) (* CARD16 *)
  sFM = tagUser + 12; (* std: 256 *) (* CARD16 *)
  sVOLUME = tagUser + 16; (* 0..255 *)
  sAM = tagUser + 18; (* std: 128 *) (* CARD8 *)
  sSTEREO = tagUser + 22; (* -180..180   >0 -> right *)
  sBALANCE = tagUser + 23; (* -90..90 *)
  sPRI = tagUser + 24; (* INT8 *)
  sWATER = tagUser + 28; (* 0..100 *)
  sNUMCHANS = tagUser + 32;
 (* sWAVE, sLENGTH, sDURATION implie each other *)
 (* sNOTE > sFREQ > sRATE (tested last) *)


 PROCEDURE GetSoundsSysAttr(VAR what: TagItem);

 PROCEDURE AllocChannel(tags: TagItemPtr): ChannelPtr;

 PROCEDURE SndDo(chan: ChannelPtr; params: TagItemPtr);

 PROCEDURE SndQueue(chan: ChannelPtr; params: TagItemPtr);

 PROCEDURE SndFinish(chan: ChannelPtr): BOOLEAN;

 PROCEDURE SndGet(chan: ChannelPtr; VAR what: TagItem);

 PROCEDURE FreeChannel(VAR chan: ChannelPtr);

 PROCEDURE AllocWave(size: CARD32): ADDRESS;

 PROCEDURE FreeWave(VAR wave: ADDRESS);

 PROCEDURE ConvertWave(VAR wave: ADDRESS; size: CARD32);
  (* signed bytes --> custom format *)

END Sounds.
