DEFINITION MODULE Files;

 FROM SYSTEM IMPORT ADDRESS;
 FROM Memory IMPORT StrPtr, TagItemPtr, tagUser, CARD16, INT16, CARD32, INT32,
  SET16, REAL32, REAL64;

 TYPE
  FilePtr;
  DirectoryPtr;
  AccessFlags = (accessRead, accessWrite);
  AccessFlagSet = SET OF AccessFlags;

 VAR
  noFile: FilePtr;
  noDir: DirectoryPtr;

 CONST
  fNAME = tagUser + 0; (* StrPtr *)
  fLENGTH = tagUser + 1; (* INT32 *)
  fTEXT = tagUser + 16; (* StrPtr *)
  fFLAGS = tagUser + 8;
   afFILE = 1; bfFile = 0;
   afNEWFILE = 2; bfNewFile = 1;
   afMODULE = 4; bfModule = 2;
   afPARAM = 8; bfParam = 3;


 PROCEDURE AskFile(tags: TagItemPtr): StrPtr;

 PROCEDURE FileToAddress(file{R.D0}: FilePtr): ADDRESS;

 PROCEDURE AddressToFile(addr{R.D0}: ADDRESS): FilePtr;

 PROCEDURE OpenFile(name: StrPtr; flags: AccessFlagSet): FilePtr;

 PROCEDURE FileLength(f: FilePtr): INT32;

 PROCEDURE ReadFileBytes(f: FilePtr; data: ADDRESS; length: INT32): INT32;

 PROCEDURE WriteFileBytes(f: FilePtr; data: ADDRESS; length: INT32): INT32;

 PROCEDURE SkipFileBytes(f: FilePtr; count: INT32): INT32;

 PROCEDURE GetFilePos(f: FilePtr): INT32;

 PROCEDURE SetFilePos(f: FilePtr; pos: INT32): INT32;

 PROCEDURE FileErrorMsg(): StrPtr;

 PROCEDURE CloseFile(VAR f: FilePtr);

 PROCEDURE RenameFile(oldName, newName: StrPtr): BOOLEAN;

 PROCEDURE DeleteFile(name: StrPtr): BOOLEAN;

 PROCEDURE OpenDirectory(name: StrPtr): DirectoryPtr;

 PROCEDURE DirectoryNext(d: DirectoryPtr; tags: TagItemPtr): BOOLEAN;

 PROCEDURE CloseDirectory(VAR d: DirectoryPtr);

 CONST
  msGraphic = 0;
  msSound = 1;
  msClock = 2;
  msInput = 3;
  msDialogs = 4;
  msMenus = 5;

 PROCEDURE AskMiscSettings(which: SET16): SET16;

END Files.
