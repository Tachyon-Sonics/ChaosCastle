modula2\Chaos2Zone.mod
ImplementationModule [definition=DefinitionModule [name=Chaos2Zone]]
  NodeList
    Import [fromModule=Memory, items=[SET16, CARD8, CARD16, INT16]]
    Import [fromModule=Trigo, items=[RND, SQRT, SIN, COS]]
    Import [fromModule=Registration, items=[registered]]
    Import [fromModule=ChaosBase, items=[Zone, zone, level, powerCountDown, pLife, Anims, AnimSet, Obj, ObjPtr, mainPlayer, AnimAlienSet, difficulty, water, snow, stages, animList, Frac, specialStage, nbDollar, nbSterling]]
    Import [fromModule=ChaosGraphics, items=[SetRGB, CycleRGB, castle, castleWidth, castleHeight, gameWidth, gameHeight, BW, BH, NbWall, NbBackground, PW, PH, backpx, backpy, SOW, SOH, NbClear, dualpf]]
    Import [fromModule=ChaosImages, items=[InitPalette]]
    Import [fromModule=ChaosActions, items=[CreateObj, msgObj, priorities, statPos, moneyPos, PopMessage, lifePos, GetCenter]]
    Import [fromModule=ChaosObjects, items=[FilterProc, RandomProc, ChooseProc, Rnd, ExpRandom, Set, Reset, Get, Put, Mark, Marked, FlushMarks, Clear, Cadre, All, OnlyBackground, OnlyWall, Fill, FillCond, FillRandom, FillChoose, PutRandom, PutObj, PutBlockObj, PutFineObj, Put4Objs, PutRandomObjs, FindIsolatedPlace, PutIsolatedObjs, PutDeltaObjs, PutGridObjs, PutRndStatObjs, PutChaosObjs, PutChaosChain, FillObj, PutPlayer, PutExit, PutKamikaze, PutPic, PutBlockBonus, PutTBonus, PutHospital, PutBullet, PutMagnet, PutSleeper, PutInvinsibility, PutFreeFire, PutMaxPower, PutChaosSterling, PutMoney, PutExtraPower, PutExtraLife, PutRAlien1, PutAlien1, PutAColor, PutColor, PutTrefle, PutTri, PutCartoon, PutRAlien2, PutAlien2, PutCFour, PutFour, PutQuad, PutABox, PutNest, PutCreatorR, PutCreatorC, PutDeadObj, PutBubbleMaker, PutMagnetR, PutMagnetA, PutMachine, PutCannon3, PutTurret, Rect, PutIsolated]]
    Import [fromModule=ChaosGenerator, items=[MakeLink, DrawPacman, Road, Excavate, PutCross, FillEllipse, TripleLoop, GCastle, Cave, DrawFactory, DrawLabyrinth, RemIsolated, VRace, DrawCastle, DrawBoxes, Join, FlipVert, FlipHorz, Rotate, FindIsolatedRect]]
    Import [fromModule=ChaosBonus, items=[Money, Moneys, TimedBonus, tbDBSpeed, tbSGSpeed, tbMagnet, tbInvinsibility, tbSleeper, tbBullet, tbBonusLevel, tbHospital, tbFreeFire, tbMaxPower, tbNoMissile, tbDifficulty, tbExit, tbBomb, MoneySet, tbHelp, BonusLevel]]
    Import [fromModule=ChaosSmartBonus, items=[sbExtraLife, sbExtraPower]]
    Import [fromModule=ChaosAlien, items=[aDbOval, aCartoon, aSmallDrawer, aBigDrawer, aHospital, aDiese, aKamikaze, aStar, aBubble, aBumper, aPic, aTri, aTrefle, aBig, aSquare, aFlame, aColor]]
    Import [fromModule=ChaosCreator, items=[cAlienV, cAlienA, cCreatorR, cCreatorC, cCircle, cController, cChief, cFour, cQuad, cAlienBox, cNest, cGrid, cPopUp, cGhost]]
    Import [fromModule=ChaosDObj, items=[doCartoon, doMagnetR, doMagnetA, doSand, doMirror, doWindMaker, doBubbleMaker, doFireMaker, doFireWall]]
    Import [fromModule=ChaosMachine, items=[mTraverse, mCannon1, mCannon2, mCannon3, mTurret, mReactor, mDoor]]
    Import [fromModule=ChaosBoss, items=[bBrotherAlien, bSisterAlien, bMotherAlien, bFatherAlien, bMasterAlien1, bMasterAlien2, bMasterEye, bMasterMouth]]
    Import [fromModule=Chaos1Zone, items=[fillTypes, fillCount, fillRndAdd, fKind, fSubKind, aStat, AddOptions, RectFill, flipVert, flipHorz, rotate, pLife2, pLife3, pLife4]]
  NodeList
    ConstantDefinition [name=fKmk, value=ConstantLiteral [value=0]]
      ConstantLiteral [value=0]
    ConstantDefinition [name=fPic, value=ConstantLiteral [value=1]]
      ConstantLiteral [value=1]
    ConstantDefinition [name=fMoneyS, value=ConstantLiteral [value=2]]
      ConstantLiteral [value=2]
    ConstantDefinition [name=fMoneyMix, value=ConstantLiteral [value=3]]
      ConstantLiteral [value=3]
    ConstantDefinition [name=fAlienColor, value=ConstantLiteral [value=4]]
      ConstantLiteral [value=4]
    ConstantDefinition [name=fAlienFour, value=ConstantLiteral [value=5]]
      ConstantLiteral [value=5]
    ConstantDefinition [name=fCannon1, value=ConstantLiteral [value=6]]
      ConstantLiteral [value=6]
    ConstantDefinition [name=fCannon2, value=ConstantLiteral [value=7]]
      ConstantLiteral [value=7]
    ConstantDefinition [name=fCartoon, value=ConstantLiteral [value=8]]
      ConstantLiteral [value=8]
    ConstantDefinition [name=fNone, value=ConstantLiteral [value=9]]
      ConstantLiteral [value=9]
    ConstantDefinition [name=fAnims1, value=ConstantLiteral [value=10]]
      ConstantLiteral [value=10]
    ConstantDefinition [name=fAnims2, value=ConstantLiteral [value=11]]
      ConstantLiteral [value=11]
    ConstantDefinition [name=fAnims3, value=ConstantLiteral [value=12]]
      ConstantLiteral [value=12]
    ConstantDefinition [name=fAnims4, value=ConstantLiteral [value=13]]
      ConstantLiteral [value=13]
    ConstantDefinition [name=fCrunchY, value=ConstantLiteral [value=14]]
      ConstantLiteral [value=14]
    ConstantDefinition [name=fCrunchX, value=ConstantLiteral [value=15]]
      ConstantLiteral [value=15]
    ConstantDefinition [name=Back4x4, value=ConstantLiteral [value=8]]
      ConstantLiteral [value=8]
    ConstantDefinition [name=BackNone, value=ConstantLiteral [value=9]]
      ConstantLiteral [value=9]
    ConstantDefinition [name=Back2x2, value=ConstantLiteral [value=10]]
      ConstantLiteral [value=10]
    ConstantDefinition [name=BackSmall, value=ConstantLiteral [value=11]]
      ConstantLiteral [value=11]
    ConstantDefinition [name=BackBig, value=ConstantLiteral [value=12]]
      ConstantLiteral [value=12]
    ConstantDefinition [name=Back8x8, value=ConstantLiteral [value=13]]
      ConstantLiteral [value=13]
    ConstantDefinition [name=Tar, value=ConstantLiteral [value=14]]
      ConstantLiteral [value=14]
    ConstantDefinition [name=Ground, value=ConstantLiteral [value=15]]
      ConstantLiteral [value=15]
    ConstantDefinition [name=Ground2, value=ConstantLiteral [value=16]]
      ConstantLiteral [value=16]
    ConstantDefinition [name=Ice, value=ConstantLiteral [value=17]]
      ConstantLiteral [value=17]
    ConstantDefinition [name=Light, value=ConstantLiteral [value=18]]
      ConstantLiteral [value=18]
    ConstantDefinition [name=Balls, value=ConstantLiteral [value=19]]
      ConstantLiteral [value=19]
    ConstantDefinition [name=Round4, value=ConstantLiteral [value=20]]
      ConstantLiteral [value=20]
    ConstantDefinition [name=FalseBlock, value=ConstantLiteral [value=21]]
      ConstantLiteral [value=21]
    ConstantDefinition [name=FalseEmpty, value=ConstantLiteral [value=23]]
      ConstantLiteral [value=23]
    ConstantDefinition [name=EmptyBlock, value=ConstantLiteral [value=24]]
      ConstantLiteral [value=24]
    ConstantDefinition [name=Sq1Block, value=ConstantLiteral [value=25]]
      ConstantLiteral [value=25]
    ConstantDefinition [name=Sq4Block, value=ConstantLiteral [value=26]]
      ConstantLiteral [value=26]
    ConstantDefinition [name=Sq4TravBlock, value=ConstantLiteral [value=27]]
      ConstantLiteral [value=27]
    ConstantDefinition [name=TravBlock, value=ConstantLiteral [value=28]]
      ConstantLiteral [value=28]
    ConstantDefinition [name=Fact1Block, value=ConstantLiteral [value=29]]
      ConstantLiteral [value=29]
    ConstantDefinition [name=Fact2Block, value=ConstantLiteral [value=30]]
      ConstantLiteral [value=30]
    ConstantDefinition [name=Fact3Block, value=ConstantLiteral [value=31]]
      ConstantLiteral [value=31]
    ConstantDefinition [name=SimpleBlock, value=ConstantLiteral [value=32]]
      ConstantLiteral [value=32]
    ConstantDefinition [name=Granit1, value=ConstantLiteral [value=33]]
      ConstantLiteral [value=33]
    ConstantDefinition [name=Granit2, value=ConstantLiteral [value=34]]
      ConstantLiteral [value=34]
    ConstantDefinition [name=BigBlock, value=ConstantLiteral [value=35]]
      ConstantLiteral [value=35]
    ConstantDefinition [name=Bricks, value=ConstantLiteral [value=36]]
      ConstantLiteral [value=36]
    ConstantDefinition [name=Fade1, value=ConstantLiteral [value=37]]
      ConstantLiteral [value=37]
    ConstantDefinition [name=Fade2, value=ConstantLiteral [value=38]]
      ConstantLiteral [value=38]
    ConstantDefinition [name=Fade3, value=ConstantLiteral [value=39]]
      ConstantLiteral [value=39]
    ConstantDefinition [name=FBig1, value=ConstantLiteral [value=40]]
      ConstantLiteral [value=40]
    ConstantDefinition [name=FBig2, value=ConstantLiteral [value=41]]
      ConstantLiteral [value=41]
    ConstantDefinition [name=FSmall1, value=ConstantLiteral [value=42]]
      ConstantLiteral [value=42]
    ConstantDefinition [name=FSmall2, value=ConstantLiteral [value=43]]
      ConstantLiteral [value=43]
    ConstantDefinition [name=FRound, value=ConstantLiteral [value=44]]
      ConstantLiteral [value=44]
    ConstantDefinition [name=FStar, value=ConstantLiteral [value=45]]
      ConstantLiteral [value=45]
    ConstantDefinition [name=FPanic, value=ConstantLiteral [value=46]]
      ConstantLiteral [value=46]
    ConstantDefinition [name=F9x9, value=ConstantLiteral [value=47]]
      ConstantLiteral [value=47]
    ConstantDefinition [name=Forest1, value=ConstantLiteral [value=48]]
      ConstantLiteral [value=48]
    ConstantDefinition [name=Forest7, value=ConstantLiteral [value=54]]
      ConstantLiteral [value=54]
    ConstantDefinition [name=Leaf1, value=ConstantLiteral [value=55]]
      ConstantLiteral [value=55]
    ConstantDefinition [name=Leaf2, value=ConstantLiteral [value=56]]
      ConstantLiteral [value=56]
    ConstantDefinition [name=Leaf3, value=ConstantLiteral [value=57]]
      ConstantLiteral [value=57]
    ConstantDefinition [name=Leaf4, value=ConstantLiteral [value=58]]
      ConstantLiteral [value=58]
    ConstantDefinition [name=BarLight, value=ConstantLiteral [value=59]]
      ConstantLiteral [value=59]
    ConstantDefinition [name=BarDark, value=ConstantLiteral [value=60]]
      ConstantLiteral [value=60]
    ConstantDefinition [name=TravLight, value=ConstantLiteral [value=61]]
      ConstantLiteral [value=61]
    ConstantDefinition [name=RGBBlock, value=ConstantLiteral [value=62]]
      ConstantLiteral [value=62]
    ConstantDefinition [name=IceBlock, value=ConstantLiteral [value=63]]
      ConstantLiteral [value=63]
  NodeList
  NodeList
  NodeList
    ProcedureImplementation [name=Rooms, arguments=[], returnType=null]
      NodeList
        VariableDefinition [name=c, type=LiteralType [name=CARD16]]
        VariableDefinition [name=x, type=LiteralType [name=INT16]]
        VariableDefinition [name=y, type=LiteralType [name=INT16]]
        VariableDefinition [name=sz, type=LiteralType [name=INT16]]
        VariableDefinition [name=d, type=LiteralType [name=INT16]]
        VariableDefinition [name=angle, type=LiteralType [name=INT16]]
        VariableDefinition [name=val, type=LiteralType [name=CARD8]]
      NodeList
        ProcedureCall [procedureName=Clear, arguments=[ConstantLiteral [value=60], ConstantLiteral [value=60]]]
          NodeList
            ConstantLiteral [value=60]
            ConstantLiteral [value=60]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=EmptyBlock]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=59]
            ConstantLiteral [value=59]
            Identifier [name=EmptyBlock]
        IfStatement [condition=Identifier [name=dualpf], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=BackNone]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back8x8]]]]
          Identifier [name=dualpf]
          NodeList
            Assignement [target=Identifier [name=val], value=Identifier [name=BackNone]]
              Identifier [name=val]
              Identifier [name=BackNone]
          NodeList
            Assignement [target=Identifier [name=val], value=Identifier [name=Back8x8]]
              Identifier [name=val]
              Identifier [name=Back8x8]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=10], ConstantLiteral [value=9], ConstantLiteral [value=49], ConstantLiteral [value=11], Identifier [name=val]]]
          NodeList
            ConstantLiteral [value=10]
            ConstantLiteral [value=9]
            ConstantLiteral [value=49]
            ConstantLiteral [value=11]
            Identifier [name=val]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=10], ConstantLiteral [value=29], ConstantLiteral [value=49], ConstantLiteral [value=31], Identifier [name=val]]]
          NodeList
            ConstantLiteral [value=10]
            ConstantLiteral [value=29]
            ConstantLiteral [value=49]
            ConstantLiteral [value=31]
            Identifier [name=val]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=47], ConstantLiteral [value=12], ConstantLiteral [value=49], ConstantLiteral [value=28], Identifier [name=val]]]
          NodeList
            ConstantLiteral [value=47]
            ConstantLiteral [value=12]
            ConstantLiteral [value=49]
            ConstantLiteral [value=28]
            Identifier [name=val]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=10], ConstantLiteral [value=32], ConstantLiteral [value=12], ConstantLiteral [value=51], Identifier [name=val]]]
          NodeList
            ConstantLiteral [value=10]
            ConstantLiteral [value=32]
            ConstantLiteral [value=12]
            ConstantLiteral [value=51]
            Identifier [name=val]
        ProcedureCall [procedureName=PutPlayer, arguments=[ConstantLiteral [value=11], ConstantLiteral [value=10]]]
          NodeList
            ConstantLiteral [value=11]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=PutExit, arguments=[ConstantLiteral [value=11], ConstantLiteral [value=50]]]
          NodeList
            ConstantLiteral [value=11]
            ConstantLiteral [value=50]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=11], ConstantLiteral [value=9], ConstantLiteral [value=48], ConstantLiteral [value=11]]]
          NodeList
            ConstantLiteral [value=11]
            ConstantLiteral [value=9]
            ConstantLiteral [value=48]
            ConstantLiteral [value=11]
        ProcedureCall [procedureName=PutMachine, arguments=[Identifier [name=mTraverse], ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=mTraverse]
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=11], ConstantLiteral [value=29], ConstantLiteral [value=48], ConstantLiteral [value=31]]]
          NodeList
            ConstantLiteral [value=11]
            ConstantLiteral [value=29]
            ConstantLiteral [value=48]
            ConstantLiteral [value=31]
        ProcedureCall [procedureName=PutMachine, arguments=[Identifier [name=mTraverse], ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=3]]]
          NodeList
            Identifier [name=mTraverse]
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=3]
        Assignement [target=Identifier [name=fillTypes], value=SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=fAlienColor], Identifier [name=fAlienFour], Identifier [name=fCartoon], Identifier [name=fNone], Identifier [name=fAnims1], Identifier [name=fAnims2], Identifier [name=fAnims3], Identifier [name=fAnims4]]]]
          Identifier [name=fillTypes]
          SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=fAlienColor], Identifier [name=fAlienFour], Identifier [name=fCartoon], Identifier [name=fNone], Identifier [name=fAnims1], Identifier [name=fAnims2], Identifier [name=fAnims3], Identifier [name=fAnims4]]]
            NodeList
              Identifier [name=fAlienColor]
              Identifier [name=fAlienFour]
              Identifier [name=fCartoon]
              Identifier [name=fNone]
              Identifier [name=fAnims1]
              Identifier [name=fAnims2]
              Identifier [name=fAnims3]
              Identifier [name=fAnims4]
        ForLoop [identifier=Identifier [name=c], fromExpression=ConstantLiteral [value=0], toExpression=ConstantLiteral [value=15], byExpression=null, statements=[Assignement [target=ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=c]]], value=ConstantLiteral [value=3]], Assignement [target=ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=c]]], value=ConstantLiteral [value=2]]]]
          ConstantLiteral [value=0]
          ConstantLiteral [value=15]
          NodeList
            Assignement [target=ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=c]]], value=ConstantLiteral [value=3]]
              ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=c]]]
                Identifier [name=fillCount]
                NodeList
                  Identifier [name=c]
              ConstantLiteral [value=3]
            Assignement [target=ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=c]]], value=ConstantLiteral [value=2]]
              ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=c]]]
                Identifier [name=fillRndAdd]
                NodeList
                  Identifier [name=c]
              ConstantLiteral [value=2]
        Assignement [target=ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=1]]], value=Identifier [name=ALIEN2]]
          ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=1]]]
            Identifier [name=fKind]
            NodeList
              ConstantLiteral [value=1]
          Identifier [name=ALIEN2]
        Assignement [target=ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=1]]], value=Identifier [name=cNest]]
          ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=1]]]
            Identifier [name=fSubKind]
            NodeList
              ConstantLiteral [value=1]
          Identifier [name=cNest]
        Assignement [target=ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=1]]], value=ConstantLiteral [value=0]]
          ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=1]]]
            Identifier [name=aStat]
            NodeList
              ConstantLiteral [value=1]
          ConstantLiteral [value=0]
        Assignement [target=ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=2]]], value=Identifier [name=ALIEN2]]
          ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=2]]]
            Identifier [name=fKind]
            NodeList
              ConstantLiteral [value=2]
          Identifier [name=ALIEN2]
        Assignement [target=ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=2]]], value=Identifier [name=cQuad]]
          ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=2]]]
            Identifier [name=fSubKind]
            NodeList
              ConstantLiteral [value=2]
          Identifier [name=cQuad]
        Assignement [target=ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=2]]], value=Identifier [name=pLife3]]
          ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=2]]]
            Identifier [name=aStat]
            NodeList
              ConstantLiteral [value=2]
          Identifier [name=pLife3]
        Assignement [target=ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=3]]], value=Identifier [name=ALIEN2]]
          ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=3]]]
            Identifier [name=fKind]
            NodeList
              ConstantLiteral [value=3]
          Identifier [name=ALIEN2]
        Assignement [target=ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=3]]], value=Identifier [name=cCreatorC]]
          ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=3]]]
            Identifier [name=fSubKind]
            NodeList
              ConstantLiteral [value=3]
          Identifier [name=cCreatorC]
        Assignement [target=ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=3]]], value=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=pLife3], operator="+", right=ConstantLiteral [value=40]], operator="+", right=InfixOpExpression [left=Identifier [name=difficulty], operator="*", right=ConstantLiteral [value=4]]]]
          ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=3]]]
            Identifier [name=aStat]
            NodeList
              ConstantLiteral [value=3]
          InfixOpExpression [left=InfixOpExpression [left=Identifier [name=pLife3], operator="+", right=ConstantLiteral [value=40]], operator="+", right=InfixOpExpression [left=Identifier [name=difficulty], operator="*", right=ConstantLiteral [value=4]]]
            InfixOpExpression [left=Identifier [name=pLife3], operator="+", right=ConstantLiteral [value=40]]
              Identifier [name=pLife3]
              ConstantLiteral [value=40]
            InfixOpExpression [left=Identifier [name=difficulty], operator="*", right=ConstantLiteral [value=4]]
              Identifier [name=difficulty]
              ConstantLiteral [value=4]
        Assignement [target=ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=4]]], value=Identifier [name=ALIEN2]]
          ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=4]]]
            Identifier [name=fKind]
            NodeList
              ConstantLiteral [value=4]
          Identifier [name=ALIEN2]
        Assignement [target=ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=4]]], value=Identifier [name=cCreatorR]]
          ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=4]]]
            Identifier [name=fSubKind]
            NodeList
              ConstantLiteral [value=4]
          Identifier [name=cCreatorR]
        Assignement [target=ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=4]]], value=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=pLife3], operator="+", right=ConstantLiteral [value=40]], operator="+", right=InfixOpExpression [left=Identifier [name=difficulty], operator="*", right=ConstantLiteral [value=4]]]]
          ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=4]]]
            Identifier [name=aStat]
            NodeList
              ConstantLiteral [value=4]
          InfixOpExpression [left=InfixOpExpression [left=Identifier [name=pLife3], operator="+", right=ConstantLiteral [value=40]], operator="+", right=InfixOpExpression [left=Identifier [name=difficulty], operator="*", right=ConstantLiteral [value=4]]]
            InfixOpExpression [left=Identifier [name=pLife3], operator="+", right=ConstantLiteral [value=40]]
              Identifier [name=pLife3]
              ConstantLiteral [value=40]
            InfixOpExpression [left=Identifier [name=difficulty], operator="*", right=ConstantLiteral [value=4]]
              Identifier [name=difficulty]
              ConstantLiteral [value=4]
        ForLoop [identifier=Identifier [name=c], fromExpression=ConstantLiteral [value=1], toExpression=ConstantLiteral [value=40], byExpression=null, statements=[Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="+", right=ConstantLiteral [value=1]]], Assignement [target=Identifier [name=d], value=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]], IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=sz], ConstantLiteral [value=4], Identifier [name=angle], Identifier [name=x], Identifier [name=y], Identifier [name=TRUE]]], thenStatements=[IfStatement [condition=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=2]], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=Back4x4]]]], elseifs=[], elseStatements=[ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Back4x4]]]]], ProcedureCall [procedureName=RectFill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]]], IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator=">=", right=ConstantLiteral [value=34]], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=FalseEmpty]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back2x2]]]], ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=sz], Identifier [name=angle], Identifier [name=val]]]], elseifs=[], elseStatements=[]]]]
          ConstantLiteral [value=1]
          ConstantLiteral [value=40]
          NodeList
            Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="+", right=ConstantLiteral [value=1]]]
              Identifier [name=sz]
              InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="+", right=ConstantLiteral [value=1]]
                InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]
                  FunctionCall [functionName=RND, arguments=[]]
                  ConstantLiteral [value=4]
                ConstantLiteral [value=1]
            Assignement [target=Identifier [name=d], value=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]]
              Identifier [name=d]
              InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]
                InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]]
                  Identifier [name=sz]
                  ConstantLiteral [value=2]
                ConstantLiteral [value=1]
            IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=sz], ConstantLiteral [value=4], Identifier [name=angle], Identifier [name=x], Identifier [name=y], Identifier [name=TRUE]]], thenStatements=[IfStatement [condition=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=2]], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=Back4x4]]]], elseifs=[], elseStatements=[ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Back4x4]]]]], ProcedureCall [procedureName=RectFill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]]], IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator=">=", right=ConstantLiteral [value=34]], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=FalseEmpty]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back2x2]]]], ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=sz], Identifier [name=angle], Identifier [name=val]]]], elseifs=[], elseStatements=[]]
              FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=sz], ConstantLiteral [value=4], Identifier [name=angle], Identifier [name=x], Identifier [name=y], Identifier [name=TRUE]]]
              NodeList
                IfStatement [condition=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=2]], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=Back4x4]]]], elseifs=[], elseStatements=[ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Back4x4]]]]]
                  InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=2]], operator="=", right=ConstantLiteral [value=0]]
                    InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=2]]
                      FunctionCall [functionName=RND, arguments=[]]
                      ConstantLiteral [value=2]
                    ConstantLiteral [value=0]
                  NodeList
                    ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=Back4x4]]]
                      NodeList
                        InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                          Identifier [name=x]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                          Identifier [name=y]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]]
                          Identifier [name=x]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]
                          Identifier [name=y]
                          Identifier [name=sz]
                        Identifier [name=Back4x4]
                  NodeList
                    ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Back4x4]]]
                      NodeList
                        InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                          Identifier [name=x]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                          Identifier [name=y]
                          Identifier [name=sz]
                        Identifier [name=d]
                        Identifier [name=d]
                        Identifier [name=Back4x4]
                ProcedureCall [procedureName=RectFill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]]]
                  NodeList
                    InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                      Identifier [name=x]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                      Identifier [name=y]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]]
                      Identifier [name=x]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]
                      Identifier [name=y]
                      Identifier [name=sz]
                IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator=">=", right=ConstantLiteral [value=34]], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=FalseEmpty]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back2x2]]]]
                  InfixOpExpression [left=Identifier [name=c], operator=">=", right=ConstantLiteral [value=34]]
                    Identifier [name=c]
                    ConstantLiteral [value=34]
                  NodeList
                    Assignement [target=Identifier [name=val], value=Identifier [name=FalseEmpty]]
                      Identifier [name=val]
                      Identifier [name=FalseEmpty]
                  NodeList
                    Assignement [target=Identifier [name=val], value=Identifier [name=Back2x2]]
                      Identifier [name=val]
                      Identifier [name=Back2x2]
                ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=sz], Identifier [name=angle], Identifier [name=val]]]
                  NodeList
                    Identifier [name=x]
                    Identifier [name=y]
                    Identifier [name=sz]
                    Identifier [name=angle]
                    Identifier [name=val]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=29], ConstantLiteral [value=29], Identifier [name=OnlyWall], Identifier [name=Sq1Block], ConstantLiteral [value=60]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=29]
            ConstantLiteral [value=29]
            Identifier [name=OnlyWall]
            Identifier [name=Sq1Block]
            ConstantLiteral [value=60]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=30], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=29], Identifier [name=OnlyWall], Identifier [name=Sq4Block], ConstantLiteral [value=60]]]
          NodeList
            ConstantLiteral [value=30]
            ConstantLiteral [value=0]
            ConstantLiteral [value=59]
            ConstantLiteral [value=29]
            Identifier [name=OnlyWall]
            Identifier [name=Sq4Block]
            ConstantLiteral [value=60]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=30], ConstantLiteral [value=30], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=OnlyWall], Identifier [name=Sq4TravBlock], ConstantLiteral [value=60]]]
          NodeList
            ConstantLiteral [value=30]
            ConstantLiteral [value=30]
            ConstantLiteral [value=59]
            ConstantLiteral [value=59]
            Identifier [name=OnlyWall]
            Identifier [name=Sq4TravBlock]
            ConstantLiteral [value=60]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=30], ConstantLiteral [value=29], ConstantLiteral [value=59], Identifier [name=OnlyWall], Identifier [name=BigBlock], ConstantLiteral [value=60]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=30]
            ConstantLiteral [value=29]
            ConstantLiteral [value=59]
            Identifier [name=OnlyWall]
            Identifier [name=BigBlock]
            ConstantLiteral [value=60]
        ProcedureCall [procedureName=PutGridObjs, arguments=[Identifier [name=BONUS], Identifier [name=TimedBonus], Identifier [name=tbHospital], ConstantLiteral [value=10], ConstantLiteral [value=10], ConstantLiteral [value=19], ConstantLiteral [value=20], ConstantLiteral [value=2], ConstantLiteral [value=2]]]
          NodeList
            Identifier [name=BONUS]
            Identifier [name=TimedBonus]
            Identifier [name=tbHospital]
            ConstantLiteral [value=10]
            ConstantLiteral [value=10]
            ConstantLiteral [value=19]
            ConstantLiteral [value=20]
            ConstantLiteral [value=2]
            ConstantLiteral [value=2]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=40], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=40]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
        ProcedureCall [procedureName=PutRAlien2, arguments=[Identifier [name=cAlienBox], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=5]]]
          NodeList
            Identifier [name=cAlienBox]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=5]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
        ProcedureCall [procedureName=PutBullet, arguments=[ConstantLiteral [value=8]]]
          NodeList
            ConstantLiteral [value=8]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=29], ConstantLiteral [value=20]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=29]
            ConstantLiteral [value=20]
        ProcedureCall [procedureName=PutInvinsibility, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=30], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=20]]]
          NodeList
            ConstantLiteral [value=30]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=20]
        ProcedureCall [procedureName=PutFreeFire, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=30], ConstantLiteral [value=21], ConstantLiteral [value=58], ConstantLiteral [value=40]]]
          NodeList
            ConstantLiteral [value=30]
            ConstantLiteral [value=21]
            ConstantLiteral [value=58]
            ConstantLiteral [value=40]
        ProcedureCall [procedureName=PutSleeper, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=21], ConstantLiteral [value=29], ConstantLiteral [value=40]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=21]
            ConstantLiteral [value=29]
            ConstantLiteral [value=40]
        ProcedureCall [procedureName=PutMaxPower, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=35], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=35]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
        ProcedureCall [procedureName=PutMagnet, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
        ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbHelp], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=tbHelp]
            ConstantLiteral [value=1]
        IfStatement [condition=InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=1]], thenStatements=[ProcedureCall [procedureName=PutRandomObjs, arguments=[Identifier [name=SMARTBONUS], Identifier [name=sbExtraPower], ConstantLiteral [value=0], ConstantLiteral [value=1]]]], elseifs=[], elseStatements=[]]
          InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=1]]
            Identifier [name=powerCountDown]
            ConstantLiteral [value=1]
          NodeList
            ProcedureCall [procedureName=PutRandomObjs, arguments=[Identifier [name=SMARTBONUS], Identifier [name=sbExtraPower], ConstantLiteral [value=0], ConstantLiteral [value=1]]]
              NodeList
                Identifier [name=SMARTBONUS]
                Identifier [name=sbExtraPower]
                ConstantLiteral [value=0]
                ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutRandomObjs, arguments=[Identifier [name=SMARTBONUS], Identifier [name=sbExtraLife], ConstantLiteral [value=0], ConstantLiteral [value=2]]]
          NodeList
            Identifier [name=SMARTBONUS]
            Identifier [name=sbExtraLife]
            ConstantLiteral [value=0]
            ConstantLiteral [value=2]
        ProcedureCall [procedureName=AddOptions, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58], ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=0], ConstantLiteral [value=10], ConstantLiteral [value=0], ConstantLiteral [value=0]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=0]
            ConstantLiteral [value=10]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
    ProcedureImplementation [name=RndRect, arguments=[], returnType=null]
      NodeList
        VariableDefinition [name=x, type=LiteralType [name=INT16]]
        VariableDefinition [name=y, type=LiteralType [name=INT16]]
      NodeList
        Assignement [target=Identifier [name=x], value=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=35]]]]
          Identifier [name=x]
          FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=35]]]
        Assignement [target=Identifier [name=y], value=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=35]]]]
          Identifier [name=y]
          FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=35]]]
        ProcedureCall [procedureName=Rect, arguments=[Identifier [name=x], Identifier [name=y], InfixOpExpression [left=Identifier [name=x], operator="+", right=ConstantLiteral [value=3]], InfixOpExpression [left=Identifier [name=y], operator="+", right=ConstantLiteral [value=3]]]]
          NodeList
            Identifier [name=x]
            Identifier [name=y]
            InfixOpExpression [left=Identifier [name=x], operator="+", right=ConstantLiteral [value=3]]
              Identifier [name=x]
              ConstantLiteral [value=3]
            InfixOpExpression [left=Identifier [name=y], operator="+", right=ConstantLiteral [value=3]]
              Identifier [name=y]
              ConstantLiteral [value=3]
    ProcedureImplementation [name=Yard, arguments=[], returnType=null]
      NodeList
        ProcedureCall [procedureName=Cadre, arguments=[ConstantLiteral [value=40], ConstantLiteral [value=40]]]
          NodeList
            ConstantLiteral [value=40]
            ConstantLiteral [value=40]
        ProcedureCall [procedureName=FillCond, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=40], ConstantLiteral [value=40], Identifier [name=OnlyWall], Identifier [name=TravLight]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=40]
            ConstantLiteral [value=40]
            Identifier [name=OnlyWall]
            Identifier [name=TravLight]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=38], ConstantLiteral [value=38]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
        ProcedureCall [procedureName=PutIsolated, arguments=[ConstantLiteral [value=5], ConstantLiteral [value=20], ConstantLiteral [value=10], ConstantLiteral [value=30], Identifier [name=BarDark]]]
          NodeList
            ConstantLiteral [value=5]
            ConstantLiteral [value=20]
            ConstantLiteral [value=10]
            ConstantLiteral [value=30]
            Identifier [name=BarDark]
        ProcedureCall [procedureName=FillRandom, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=39], ConstantLiteral [value=39], Identifier [name=Back4x4], Identifier [name=Back8x8], Identifier [name=OnlyBackground], Identifier [name=ExpRandom]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=39]
            ConstantLiteral [value=39]
            Identifier [name=Back4x4]
            Identifier [name=Back8x8]
            Identifier [name=OnlyBackground]
            Identifier [name=ExpRandom]
        ProcedureCall [procedureName=FillCond, arguments=[ConstantLiteral [value=18], ConstantLiteral [value=18], ConstantLiteral [value=22], ConstantLiteral [value=22], Identifier [name=OnlyBackground], Identifier [name=Light]]]
          NodeList
            ConstantLiteral [value=18]
            ConstantLiteral [value=18]
            ConstantLiteral [value=22]
            ConstantLiteral [value=22]
            Identifier [name=OnlyBackground]
            Identifier [name=Light]
        IfStatement [condition=Identifier [name=dualpf], thenStatements=[ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=39], ConstantLiteral [value=39], Identifier [name=OnlyBackground], Identifier [name=BackNone], ConstantLiteral [value=255]]]], elseifs=[], elseStatements=[]]
          Identifier [name=dualpf]
          NodeList
            ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=39], ConstantLiteral [value=39], Identifier [name=OnlyBackground], Identifier [name=BackNone], ConstantLiteral [value=255]]]
              NodeList
                ConstantLiteral [value=1]
                ConstantLiteral [value=1]
                ConstantLiteral [value=39]
                ConstantLiteral [value=39]
                Identifier [name=OnlyBackground]
                Identifier [name=BackNone]
                ConstantLiteral [value=255]
        ProcedureCall [procedureName=PutPlayer, arguments=[ConstantLiteral [value=2], ConstantLiteral [value=2]]]
          NodeList
            ConstantLiteral [value=2]
            ConstantLiteral [value=2]
        IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=nbSterling], operator=">=", right=ConstantLiteral [value=190]]), operator="AND", right=(InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=2]])], thenStatements=[ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN3], Identifier [name=bMasterEye], ConstantLiteral [value=0], ConstantLiteral [value=19], ConstantLiteral [value=20]]], ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN3], Identifier [name=bMasterEye], ConstantLiteral [value=1], ConstantLiteral [value=21], ConstantLiteral [value=20]]], ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN3], Identifier [name=bMasterMouth], ConstantLiteral [value=0], ConstantLiteral [value=20], ConstantLiteral [value=20]]], ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN3], Identifier [name=bMasterAlien1], ConstantLiteral [value=0], ConstantLiteral [value=20], ConstantLiteral [value=20]]]], elseifs=[], elseStatements=[]]
          InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=nbSterling], operator=">=", right=ConstantLiteral [value=190]]), operator="AND", right=(InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=2]])]
            (InfixOpExpression [left=Identifier [name=nbSterling], operator=">=", right=ConstantLiteral [value=190]])
              InfixOpExpression [left=Identifier [name=nbSterling], operator=">=", right=ConstantLiteral [value=190]]
                Identifier [name=nbSterling]
                ConstantLiteral [value=190]
            (InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=2]])
              InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=2]]
                Identifier [name=difficulty]
                ConstantLiteral [value=2]
          NodeList
            ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN3], Identifier [name=bMasterEye], ConstantLiteral [value=0], ConstantLiteral [value=19], ConstantLiteral [value=20]]]
              NodeList
                Identifier [name=ALIEN3]
                Identifier [name=bMasterEye]
                ConstantLiteral [value=0]
                ConstantLiteral [value=19]
                ConstantLiteral [value=20]
            ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN3], Identifier [name=bMasterEye], ConstantLiteral [value=1], ConstantLiteral [value=21], ConstantLiteral [value=20]]]
              NodeList
                Identifier [name=ALIEN3]
                Identifier [name=bMasterEye]
                ConstantLiteral [value=1]
                ConstantLiteral [value=21]
                ConstantLiteral [value=20]
            ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN3], Identifier [name=bMasterMouth], ConstantLiteral [value=0], ConstantLiteral [value=20], ConstantLiteral [value=20]]]
              NodeList
                Identifier [name=ALIEN3]
                Identifier [name=bMasterMouth]
                ConstantLiteral [value=0]
                ConstantLiteral [value=20]
                ConstantLiteral [value=20]
            ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN3], Identifier [name=bMasterAlien1], ConstantLiteral [value=0], ConstantLiteral [value=20], ConstantLiteral [value=20]]]
              NodeList
                Identifier [name=ALIEN3]
                Identifier [name=bMasterAlien1]
                ConstantLiteral [value=0]
                ConstantLiteral [value=20]
                ConstantLiteral [value=20]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=20], ConstantLiteral [value=20], ConstantLiteral [value=38], ConstantLiteral [value=38]]]
          NodeList
            ConstantLiteral [value=20]
            ConstantLiteral [value=20]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
        ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbExit], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=tbExit]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=3], ConstantLiteral [value=3], ConstantLiteral [value=38], ConstantLiteral [value=38]]]
          NodeList
            ConstantLiteral [value=3]
            ConstantLiteral [value=3]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
        ProcedureCall [procedureName=PutMagnetR, arguments=[ConstantLiteral [value=3], ConstantLiteral [value=15]]]
          NodeList
            ConstantLiteral [value=3]
            ConstantLiteral [value=15]
        ProcedureCall [procedureName=PutMagnetA, arguments=[ConstantLiteral [value=3], ConstantLiteral [value=15]]]
          NodeList
            ConstantLiteral [value=3]
            ConstantLiteral [value=15]
        ProcedureCall [procedureName=FillObj, arguments=[Identifier [name=ALIEN1], Identifier [name=aCartoon], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=19], ConstantLiteral [value=38], ConstantLiteral [value=19], Identifier [name=FALSE]]]
          NodeList
            Identifier [name=ALIEN1]
            Identifier [name=aCartoon]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=19]
            ConstantLiteral [value=38]
            ConstantLiteral [value=19]
            Identifier [name=FALSE]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=10], ConstantLiteral [value=3], ConstantLiteral [value=29], ConstantLiteral [value=38]]]
          NodeList
            ConstantLiteral [value=10]
            ConstantLiteral [value=3]
            ConstantLiteral [value=29]
            ConstantLiteral [value=38]
        ProcedureCall [procedureName=PutMachine, arguments=[Identifier [name=mCannon1], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=5]]]
          NodeList
            Identifier [name=mCannon1]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=5]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=3], ConstantLiteral [value=10], ConstantLiteral [value=38], ConstantLiteral [value=29]]]
          NodeList
            ConstantLiteral [value=3]
            ConstantLiteral [value=10]
            ConstantLiteral [value=38]
            ConstantLiteral [value=29]
        ProcedureCall [procedureName=PutMachine, arguments=[Identifier [name=mCannon2], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=5]]]
          NodeList
            Identifier [name=mCannon2]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=5]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=10], ConstantLiteral [value=10], ConstantLiteral [value=29], ConstantLiteral [value=29]]]
          NodeList
            ConstantLiteral [value=10]
            ConstantLiteral [value=10]
            ConstantLiteral [value=29]
            ConstantLiteral [value=29]
        ProcedureCall [procedureName=PutCannon3, arguments=[ConstantLiteral [value=5]]]
          NodeList
            ConstantLiteral [value=5]
        ProcedureCall [procedureName=PutTurret, arguments=[ConstantLiteral [value=7]]]
          NodeList
            ConstantLiteral [value=7]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=3], ConstantLiteral [value=3], ConstantLiteral [value=38], ConstantLiteral [value=38]]]
          NodeList
            ConstantLiteral [value=3]
            ConstantLiteral [value=3]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
        ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=aHospital], Identifier [name=pLife3], ConstantLiteral [value=10]]]
          NodeList
            Identifier [name=aHospital]
            Identifier [name=pLife3]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=PutRAlien1, arguments=[Identifier [name=aKamikaze], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=10]]]
          NodeList
            Identifier [name=aKamikaze]
            ConstantLiteral [value=0]
            ConstantLiteral [value=3]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=PutAlien2, arguments=[Identifier [name=cAlienV], Identifier [name=pLife3], ConstantLiteral [value=10]]]
          NodeList
            Identifier [name=cAlienV]
            Identifier [name=pLife3]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=PutFour, arguments=[Identifier [name=pLife3], ConstantLiteral [value=10]]]
          NodeList
            Identifier [name=pLife3]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=PutBullet, arguments=[ConstantLiteral [value=4]]]
          NodeList
            ConstantLiteral [value=4]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutTrefle, arguments=[Identifier [name=pLife2], ConstantLiteral [value=5]]]
          NodeList
            Identifier [name=pLife2]
            ConstantLiteral [value=5]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutAlien2, arguments=[Identifier [name=cAlienA], Identifier [name=pLife3], ConstantLiteral [value=10]]]
          NodeList
            Identifier [name=cAlienA]
            Identifier [name=pLife3]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutTri, arguments=[Identifier [name=pLife3], ConstantLiteral [value=5]]]
          NodeList
            Identifier [name=pLife3]
            ConstantLiteral [value=5]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=20], ConstantLiteral [value=20], ConstantLiteral [value=38], ConstantLiteral [value=38]]]
          NodeList
            ConstantLiteral [value=20]
            ConstantLiteral [value=20]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
        ProcedureCall [procedureName=PutNest, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=15]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=15]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=7], ConstantLiteral [value=7]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=7]
            ConstantLiteral [value=7]
        ProcedureCall [procedureName=PutFreeFire, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutMaxPower, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=AddOptions, arguments=[ConstantLiteral [value=10], ConstantLiteral [value=10], ConstantLiteral [value=38], ConstantLiteral [value=38], ConstantLiteral [value=5], ConstantLiteral [value=5], ConstantLiteral [value=1], ConstantLiteral [value=3], ConstantLiteral [value=0], ConstantLiteral [value=5], ConstantLiteral [value=3]]]
          NodeList
            ConstantLiteral [value=10]
            ConstantLiteral [value=10]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
            ConstantLiteral [value=5]
            ConstantLiteral [value=5]
            ConstantLiteral [value=1]
            ConstantLiteral [value=3]
            ConstantLiteral [value=0]
            ConstantLiteral [value=5]
            ConstantLiteral [value=3]
    ProcedureImplementation [name=Antarctica, arguments=[], returnType=null]
      NodeList
        ConstantDefinition [name=W, value=ConstantLiteral [value=120]]
          ConstantLiteral [value=120]
        ConstantDefinition [name=H, value=ConstantLiteral [value=60]]
          ConstantLiteral [value=60]
        ConstantDefinition [name=MX, value=InfixOpExpression [left=Identifier [name=W], operator="DIV", right=ConstantLiteral [value=2]]]
          InfixOpExpression [left=Identifier [name=W], operator="DIV", right=ConstantLiteral [value=2]]
            Identifier [name=W]
            ConstantLiteral [value=2]
        ConstantDefinition [name=MY, value=InfixOpExpression [left=Identifier [name=H], operator="DIV", right=ConstantLiteral [value=2]]]
          InfixOpExpression [left=Identifier [name=H], operator="DIV", right=ConstantLiteral [value=2]]
            Identifier [name=H]
            ConstantLiteral [value=2]
      NodeList
        VariableDefinition [name=lx, type=LiteralType [name=INT16]]
        VariableDefinition [name=ly, type=LiteralType [name=INT16]]
        VariableDefinition [name=sz, type=LiteralType [name=INT16]]
        VariableDefinition [name=at, type=LiteralType [name=INT16]]
        VariableDefinition [name=c, type=LiteralType [name=CARD16]]
        VariableDefinition [name=val, type=LiteralType [name=CARD8]]
      NodeList
        ProcedureCall [procedureName=Clear, arguments=[Identifier [name=W], Identifier [name=H]]]
          NodeList
            Identifier [name=W]
            Identifier [name=H]
        Assignement [target=Identifier [name=water], value=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=difficulty], operator="<", right=ConstantLiteral [value=5]]), operator="OR", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="<>", right=ConstantLiteral [value=0]])]]
          Identifier [name=water]
          InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=difficulty], operator="<", right=ConstantLiteral [value=5]]), operator="OR", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="<>", right=ConstantLiteral [value=0]])]
            (InfixOpExpression [left=Identifier [name=difficulty], operator="<", right=ConstantLiteral [value=5]])
              InfixOpExpression [left=Identifier [name=difficulty], operator="<", right=ConstantLiteral [value=5]]
                Identifier [name=difficulty]
                ConstantLiteral [value=5]
            (InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="<>", right=ConstantLiteral [value=0]])
              InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="<>", right=ConstantLiteral [value=0]]
                InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]
                  FunctionCall [functionName=RND, arguments=[]]
                  ConstantLiteral [value=3]
                ConstantLiteral [value=0]
        Assignement [target=Identifier [name=snow], value=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=stages], operator=">", right=ConstantLiteral [value=0]]), operator="OR", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="<>", right=ConstantLiteral [value=0]])]]
          Identifier [name=snow]
          InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=stages], operator=">", right=ConstantLiteral [value=0]]), operator="OR", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="<>", right=ConstantLiteral [value=0]])]
            (InfixOpExpression [left=Identifier [name=stages], operator=">", right=ConstantLiteral [value=0]])
              InfixOpExpression [left=Identifier [name=stages], operator=">", right=ConstantLiteral [value=0]]
                Identifier [name=stages]
                ConstantLiteral [value=0]
            (InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="<>", right=ConstantLiteral [value=0]])
              InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="<>", right=ConstantLiteral [value=0]]
                InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]
                  FunctionCall [functionName=RND, arguments=[]]
                  ConstantLiteral [value=3]
                ConstantLiteral [value=0]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]], Identifier [name=IceBlock]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=W]
              ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=H]
              ConstantLiteral [value=1]
            Identifier [name=IceBlock]
        ProcedureCall [procedureName=VRace, arguments=[Identifier [name=Ice]]]
          NodeList
            Identifier [name=Ice]
        ProcedureCall [procedureName=MakeLink, arguments=[InfixOpExpression [left=Identifier [name=W], operator="DIV", right=ConstantLiteral [value=2]], InfixOpExpression [left=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=H], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=5]], operator="-", right=ConstantLiteral [value=1]], ConstantLiteral [value=0], ConstantLiteral [value=90], Identifier [name=Ice]]]
          NodeList
            InfixOpExpression [left=Identifier [name=W], operator="DIV", right=ConstantLiteral [value=2]]
              Identifier [name=W]
              ConstantLiteral [value=2]
            InfixOpExpression [left=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=H], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=5]], operator="-", right=ConstantLiteral [value=1]]
              InfixOpExpression [left=InfixOpExpression [left=Identifier [name=H], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=5]]
                InfixOpExpression [left=Identifier [name=H], operator="*", right=ConstantLiteral [value=2]]
                  Identifier [name=H]
                  ConstantLiteral [value=2]
                ConstantLiteral [value=5]
              ConstantLiteral [value=1]
            ConstantLiteral [value=0]
            ConstantLiteral [value=90]
            Identifier [name=Ice]
        ProcedureCall [procedureName=PutPlayer, arguments=[InfixOpExpression [left=Identifier [name=W], operator="DIV", right=ConstantLiteral [value=2]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=H], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=5]]]]
          NodeList
            InfixOpExpression [left=Identifier [name=W], operator="DIV", right=ConstantLiteral [value=2]]
              Identifier [name=W]
              ConstantLiteral [value=2]
            InfixOpExpression [left=InfixOpExpression [left=Identifier [name=H], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=5]]
              InfixOpExpression [left=Identifier [name=H], operator="*", right=ConstantLiteral [value=2]]
                Identifier [name=H]
                ConstantLiteral [value=2]
              ConstantLiteral [value=5]
        ProcedureCall [procedureName=Rect, arguments=[InfixOpExpression [left=Identifier [name=MX], operator="DIV", right=ConstantLiteral [value=2]], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=MX], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=MY], operator="-", right=ConstantLiteral [value=1]]]]
          NodeList
            InfixOpExpression [left=Identifier [name=MX], operator="DIV", right=ConstantLiteral [value=2]]
              Identifier [name=MX]
              ConstantLiteral [value=2]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=MX], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=MX]
              ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=MY], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=MY]
              ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbExit], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=tbExit]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=W], operator="DIV", right=ConstantLiteral [value=3]], Identifier [name=MY]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=W], operator="DIV", right=ConstantLiteral [value=3]]
              Identifier [name=W]
              ConstantLiteral [value=3]
            Identifier [name=MY]
        ProcedureCall [procedureName=PutDeadObj, arguments=[Identifier [name=doBubbleMaker], ConstantLiteral [value=0], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=doBubbleMaker]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[InfixOpExpression [left=InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=3]], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=MY], operator="-", right=ConstantLiteral [value=1]]]]
          NodeList
            InfixOpExpression [left=InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=3]]
              InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=2]]
                Identifier [name=W]
                ConstantLiteral [value=2]
              ConstantLiteral [value=3]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=W]
              ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=MY], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=MY]
              ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutDeadObj, arguments=[Identifier [name=doBubbleMaker], ConstantLiteral [value=0], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=doBubbleMaker]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=0], Identifier [name=MY], InfixOpExpression [left=Identifier [name=W], operator="DIV", right=ConstantLiteral [value=3]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]]]
          NodeList
            ConstantLiteral [value=0]
            Identifier [name=MY]
            InfixOpExpression [left=Identifier [name=W], operator="DIV", right=ConstantLiteral [value=3]]
              Identifier [name=W]
              ConstantLiteral [value=3]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=H]
              ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutDeadObj, arguments=[Identifier [name=doBubbleMaker], ConstantLiteral [value=0], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=doBubbleMaker]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[InfixOpExpression [left=InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=3]], Identifier [name=MY], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]]]
          NodeList
            InfixOpExpression [left=InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=3]]
              InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=2]]
                Identifier [name=W]
                ConstantLiteral [value=2]
              ConstantLiteral [value=3]
            Identifier [name=MY]
            InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=W]
              ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=H]
              ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutDeadObj, arguments=[Identifier [name=doBubbleMaker], ConstantLiteral [value=0], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=doBubbleMaker]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[Identifier [name=MX], Identifier [name=MY], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=3]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]]]
          NodeList
            Identifier [name=MX]
            Identifier [name=MY]
            InfixOpExpression [left=InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=3]]
              InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=2]]
                Identifier [name=W]
                ConstantLiteral [value=2]
              ConstantLiteral [value=3]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=H]
              ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbDBSpeed], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=tbDBSpeed]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutChaosObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=doSand], ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=10]], InfixOpExpression [left=Identifier [name=H], operator="*", right=ConstantLiteral [value=10]], ConstantLiteral [value=20]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doSand]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=10]]
              Identifier [name=W]
              ConstantLiteral [value=10]
            InfixOpExpression [left=Identifier [name=H], operator="*", right=ConstantLiteral [value=10]]
              Identifier [name=H]
              ConstantLiteral [value=10]
            ConstantLiteral [value=20]
        ProcedureCall [procedureName=Rect, arguments=[InfixOpExpression [left=InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=3]], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]]]
          NodeList
            InfixOpExpression [left=InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=2]], operator="DIV", right=ConstantLiteral [value=3]]
              InfixOpExpression [left=Identifier [name=W], operator="*", right=ConstantLiteral [value=2]]
                Identifier [name=W]
                ConstantLiteral [value=2]
              ConstantLiteral [value=3]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=W]
              ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=H]
              ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutDeadObj, arguments=[Identifier [name=doWindMaker], ConstantLiteral [value=0], ConstantLiteral [value=4]]]
          NodeList
            Identifier [name=doWindMaker]
            ConstantLiteral [value=0]
            ConstantLiteral [value=4]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=0], Identifier [name=MY], Identifier [name=MX], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]]]
          NodeList
            ConstantLiteral [value=0]
            Identifier [name=MY]
            Identifier [name=MX]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=H]
              ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutTurret, arguments=[ConstantLiteral [value=4]]]
          NodeList
            ConstantLiteral [value=4]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=2]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=2]]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=2]]
              Identifier [name=W]
              ConstantLiteral [value=2]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=2]]
              Identifier [name=H]
              ConstantLiteral [value=2]
        ProcedureCall [procedureName=PutMagnetR, arguments=[ConstantLiteral [value=2], ConstantLiteral [value=8]]]
          NodeList
            ConstantLiteral [value=2]
            ConstantLiteral [value=8]
        ProcedureCall [procedureName=PutIsolatedObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=doMirror], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=15]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doMirror]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=15]
        ProcedureCall [procedureName=PutCannon3, arguments=[ConstantLiteral [value=2]]]
          NodeList
            ConstantLiteral [value=2]
        ProcedureCall [procedureName=PutMachine, arguments=[Identifier [name=mTraverse], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=4]]]
          NodeList
            Identifier [name=mTraverse]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=4]
        ProcedureCall [procedureName=PutNest, arguments=[ConstantLiteral [value=0], InfixOpExpression [left=ConstantLiteral [value=4], operator="+", right=Identifier [name=difficulty]]]]
          NodeList
            ConstantLiteral [value=0]
            InfixOpExpression [left=ConstantLiteral [value=4], operator="+", right=Identifier [name=difficulty]]
              ConstantLiteral [value=4]
              Identifier [name=difficulty]
        ProcedureCall [procedureName=PutCartoon, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=2], ConstantLiteral [value=15]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=2]
            ConstantLiteral [value=15]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=0], Identifier [name=MY], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]]]
          NodeList
            ConstantLiteral [value=0]
            Identifier [name=MY]
            InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=W]
              ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=H]
              ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutRAlien1, arguments=[Identifier [name=aKamikaze], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=20]]]
          NodeList
            Identifier [name=aKamikaze]
            ConstantLiteral [value=0]
            ConstantLiteral [value=3]
            ConstantLiteral [value=20]
        Assignement [target=Identifier [name=fillTypes], value=SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=fNone], Identifier [name=fMoneyS], Identifier [name=fAlienFour], Identifier [name=fAnims1], Identifier [name=fAnims2]]]]
          Identifier [name=fillTypes]
          SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=fNone], Identifier [name=fMoneyS], Identifier [name=fAlienFour], Identifier [name=fAnims1], Identifier [name=fAnims2]]]
            NodeList
              Identifier [name=fNone]
              Identifier [name=fMoneyS]
              Identifier [name=fAlienFour]
              Identifier [name=fAnims1]
              Identifier [name=fAnims2]
        Assignement [target=ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=fMoneyS]]], value=ConstantLiteral [value=4]]
          ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=fMoneyS]]]
            Identifier [name=fillCount]
            NodeList
              Identifier [name=fMoneyS]
          ConstantLiteral [value=4]
        Assignement [target=ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=fMoneyS]]], value=ConstantLiteral [value=4]]
          ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=fMoneyS]]]
            Identifier [name=fillRndAdd]
            NodeList
              Identifier [name=fMoneyS]
          ConstantLiteral [value=4]
        Assignement [target=ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=fAlienFour]]], value=ConstantLiteral [value=1]]
          ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=fAlienFour]]]
            Identifier [name=fillCount]
            NodeList
              Identifier [name=fAlienFour]
          ConstantLiteral [value=1]
        Assignement [target=ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=fAlienFour]]], value=ConstantLiteral [value=3]]
          ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=fAlienFour]]]
            Identifier [name=fillRndAdd]
            NodeList
              Identifier [name=fAlienFour]
          ConstantLiteral [value=3]
        Assignement [target=ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=fAnims1]]], value=ConstantLiteral [value=1]]
          ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=fAnims1]]]
            Identifier [name=fillCount]
            NodeList
              Identifier [name=fAnims1]
          ConstantLiteral [value=1]
        Assignement [target=ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=fAnims1]]], value=ConstantLiteral [value=1]]
          ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=fAnims1]]]
            Identifier [name=fillRndAdd]
            NodeList
              Identifier [name=fAnims1]
          ConstantLiteral [value=1]
        Assignement [target=ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=fAnims2]]], value=ConstantLiteral [value=1]]
          ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=fAnims2]]]
            Identifier [name=fillCount]
            NodeList
              Identifier [name=fAnims2]
          ConstantLiteral [value=1]
        Assignement [target=ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=fAnims2]]], value=ConstantLiteral [value=0]]
          ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=fAnims2]]]
            Identifier [name=fillRndAdd]
            NodeList
              Identifier [name=fAnims2]
          ConstantLiteral [value=0]
        Assignement [target=ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=1]]], value=Identifier [name=ALIEN2]]
          ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=1]]]
            Identifier [name=fKind]
            NodeList
              ConstantLiteral [value=1]
          Identifier [name=ALIEN2]
        Assignement [target=ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=1]]], value=Identifier [name=cAlienBox]]
          ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=1]]]
            Identifier [name=fSubKind]
            NodeList
              ConstantLiteral [value=1]
          Identifier [name=cAlienBox]
        Assignement [target=ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=1]]], value=ConstantLiteral [value=0]]
          ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=1]]]
            Identifier [name=aStat]
            NodeList
              ConstantLiteral [value=1]
          ConstantLiteral [value=0]
        Assignement [target=ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=2]]], value=Identifier [name=BONUS]]
          ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=2]]]
            Identifier [name=fKind]
            NodeList
              ConstantLiteral [value=2]
          Identifier [name=BONUS]
        Assignement [target=ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=2]]], value=Identifier [name=TimedBonus]]
          ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=2]]]
            Identifier [name=fSubKind]
            NodeList
              ConstantLiteral [value=2]
          Identifier [name=TimedBonus]
        Assignement [target=ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=2]]], value=Identifier [name=tbBullet]]
          ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=2]]]
            Identifier [name=aStat]
            NodeList
              ConstantLiteral [value=2]
          Identifier [name=tbBullet]
        ForLoop [identifier=Identifier [name=c], fromExpression=ConstantLiteral [value=1], toExpression=InfixOpExpression [left=ConstantLiteral [value=10], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=8]]], byExpression=null, statements=[Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="+", right=ConstantLiteral [value=2]]], IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=2], ConstantLiteral [value=2], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=3]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=3]], Identifier [name=sz], ConstantLiteral [value=30], Identifier [name=at], Identifier [name=lx], Identifier [name=ly], Identifier [name=TRUE]]], thenStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]], Identifier [name=Balls]]], ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]], Identifier [name=Balls]]], ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]], Identifier [name=Ice]]], ProcedureCall [procedureName=PutBubbleMaker, arguments=[ConstantLiteral [value=0], Identifier [name=lx], Identifier [name=ly]]], ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbHospital], Identifier [name=lx], InfixOpExpression [left=Identifier [name=ly], operator="-", right=ConstantLiteral [value=1]]]], ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbBullet], Identifier [name=lx], InfixOpExpression [left=Identifier [name=ly], operator="+", right=ConstantLiteral [value=1]]]], IfStatement [condition=(InfixOpExpression [left=Identifier [name=c], operator="=", right=ConstantLiteral [value=16]]), thenStatements=[IfStatement [condition=InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbNoMissile], InfixOpExpression [left=Identifier [name=lx], operator="+", right=ConstantLiteral [value=1]], Identifier [name=ly]]]], elseifs=[], elseStatements=[]], ProcedureCall [procedureName=PutExtraPower, arguments=[ConstantLiteral [value=1], InfixOpExpression [left=Identifier [name=lx], operator="-", right=ConstantLiteral [value=1]], Identifier [name=ly]]]], elseifs=[], elseStatements=[]], ProcedureCall [procedureName=RectFill, arguments=[InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]]]], IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator=">", right=ConstantLiteral [value=10]], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=FalseBlock]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Ice]]]], ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=lx], Identifier [name=ly], Identifier [name=sz], Identifier [name=at], Identifier [name=val]]]], elseifs=[], elseStatements=[]]]]
          ConstantLiteral [value=1]
          InfixOpExpression [left=ConstantLiteral [value=10], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=8]]]
            ConstantLiteral [value=10]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=8]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=8]
          NodeList
            Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="+", right=ConstantLiteral [value=2]]]
              Identifier [name=sz]
              InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="+", right=ConstantLiteral [value=2]]
                InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]
                  FunctionCall [functionName=RND, arguments=[]]
                  ConstantLiteral [value=4]
                ConstantLiteral [value=2]
            IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=2], ConstantLiteral [value=2], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=3]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=3]], Identifier [name=sz], ConstantLiteral [value=30], Identifier [name=at], Identifier [name=lx], Identifier [name=ly], Identifier [name=TRUE]]], thenStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]], Identifier [name=Balls]]], ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]], Identifier [name=Balls]]], ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]], Identifier [name=Ice]]], ProcedureCall [procedureName=PutBubbleMaker, arguments=[ConstantLiteral [value=0], Identifier [name=lx], Identifier [name=ly]]], ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbHospital], Identifier [name=lx], InfixOpExpression [left=Identifier [name=ly], operator="-", right=ConstantLiteral [value=1]]]], ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbBullet], Identifier [name=lx], InfixOpExpression [left=Identifier [name=ly], operator="+", right=ConstantLiteral [value=1]]]], IfStatement [condition=(InfixOpExpression [left=Identifier [name=c], operator="=", right=ConstantLiteral [value=16]]), thenStatements=[IfStatement [condition=InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbNoMissile], InfixOpExpression [left=Identifier [name=lx], operator="+", right=ConstantLiteral [value=1]], Identifier [name=ly]]]], elseifs=[], elseStatements=[]], ProcedureCall [procedureName=PutExtraPower, arguments=[ConstantLiteral [value=1], InfixOpExpression [left=Identifier [name=lx], operator="-", right=ConstantLiteral [value=1]], Identifier [name=ly]]]], elseifs=[], elseStatements=[]], ProcedureCall [procedureName=RectFill, arguments=[InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]]]], IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator=">", right=ConstantLiteral [value=10]], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=FalseBlock]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Ice]]]], ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=lx], Identifier [name=ly], Identifier [name=sz], Identifier [name=at], Identifier [name=val]]]], elseifs=[], elseStatements=[]]
              FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=2], ConstantLiteral [value=2], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=3]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=3]], Identifier [name=sz], ConstantLiteral [value=30], Identifier [name=at], Identifier [name=lx], Identifier [name=ly], Identifier [name=TRUE]]]
              NodeList
                ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]], Identifier [name=Balls]]]
                  NodeList
                    InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]]
                      InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]]
                        Identifier [name=lx]
                        Identifier [name=sz]
                      ConstantLiteral [value=1]
                    InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]]
                      Identifier [name=ly]
                      Identifier [name=sz]
                    InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]]
                      InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]]
                        Identifier [name=lx]
                        Identifier [name=sz]
                      ConstantLiteral [value=1]
                    InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]]
                      Identifier [name=ly]
                      Identifier [name=sz]
                    Identifier [name=Balls]
                ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]], Identifier [name=Balls]]]
                  NodeList
                    InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]]
                      Identifier [name=lx]
                      Identifier [name=sz]
                    InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]]
                      InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]]
                        Identifier [name=ly]
                        Identifier [name=sz]
                      ConstantLiteral [value=1]
                    InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]]
                      Identifier [name=lx]
                      Identifier [name=sz]
                    InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]]
                      InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]]
                        Identifier [name=ly]
                        Identifier [name=sz]
                      ConstantLiteral [value=1]
                    Identifier [name=Balls]
                ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]], Identifier [name=Ice]]]
                  NodeList
                    InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]]
                      InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]]
                        Identifier [name=lx]
                        Identifier [name=sz]
                      ConstantLiteral [value=1]
                    InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], operator="+", right=ConstantLiteral [value=1]]
                      InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]]
                        Identifier [name=ly]
                        Identifier [name=sz]
                      ConstantLiteral [value=1]
                    InfixOpExpression [left=InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]]
                      InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]]
                        Identifier [name=lx]
                        Identifier [name=sz]
                      ConstantLiteral [value=1]
                    InfixOpExpression [left=InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]], operator="-", right=ConstantLiteral [value=1]]
                      InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]]
                        Identifier [name=ly]
                        Identifier [name=sz]
                      ConstantLiteral [value=1]
                    Identifier [name=Ice]
                ProcedureCall [procedureName=PutBubbleMaker, arguments=[ConstantLiteral [value=0], Identifier [name=lx], Identifier [name=ly]]]
                  NodeList
                    ConstantLiteral [value=0]
                    Identifier [name=lx]
                    Identifier [name=ly]
                ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbHospital], Identifier [name=lx], InfixOpExpression [left=Identifier [name=ly], operator="-", right=ConstantLiteral [value=1]]]]
                  NodeList
                    Identifier [name=tbHospital]
                    Identifier [name=lx]
                    InfixOpExpression [left=Identifier [name=ly], operator="-", right=ConstantLiteral [value=1]]
                      Identifier [name=ly]
                      ConstantLiteral [value=1]
                ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbBullet], Identifier [name=lx], InfixOpExpression [left=Identifier [name=ly], operator="+", right=ConstantLiteral [value=1]]]]
                  NodeList
                    Identifier [name=tbBullet]
                    Identifier [name=lx]
                    InfixOpExpression [left=Identifier [name=ly], operator="+", right=ConstantLiteral [value=1]]
                      Identifier [name=ly]
                      ConstantLiteral [value=1]
                IfStatement [condition=(InfixOpExpression [left=Identifier [name=c], operator="=", right=ConstantLiteral [value=16]]), thenStatements=[IfStatement [condition=InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbNoMissile], InfixOpExpression [left=Identifier [name=lx], operator="+", right=ConstantLiteral [value=1]], Identifier [name=ly]]]], elseifs=[], elseStatements=[]], ProcedureCall [procedureName=PutExtraPower, arguments=[ConstantLiteral [value=1], InfixOpExpression [left=Identifier [name=lx], operator="-", right=ConstantLiteral [value=1]], Identifier [name=ly]]]], elseifs=[], elseStatements=[]]
                  (InfixOpExpression [left=Identifier [name=c], operator="=", right=ConstantLiteral [value=16]])
                    InfixOpExpression [left=Identifier [name=c], operator="=", right=ConstantLiteral [value=16]]
                      Identifier [name=c]
                      ConstantLiteral [value=16]
                  NodeList
                    IfStatement [condition=InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbNoMissile], InfixOpExpression [left=Identifier [name=lx], operator="+", right=ConstantLiteral [value=1]], Identifier [name=ly]]]], elseifs=[], elseStatements=[]]
                      InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]]
                        Identifier [name=stages]
                        ConstantLiteral [value=0]
                      NodeList
                        ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbNoMissile], InfixOpExpression [left=Identifier [name=lx], operator="+", right=ConstantLiteral [value=1]], Identifier [name=ly]]]
                          NodeList
                            Identifier [name=tbNoMissile]
                            InfixOpExpression [left=Identifier [name=lx], operator="+", right=ConstantLiteral [value=1]]
                              Identifier [name=lx]
                              ConstantLiteral [value=1]
                            Identifier [name=ly]
                    ProcedureCall [procedureName=PutExtraPower, arguments=[ConstantLiteral [value=1], InfixOpExpression [left=Identifier [name=lx], operator="-", right=ConstantLiteral [value=1]], Identifier [name=ly]]]
                      NodeList
                        ConstantLiteral [value=1]
                        InfixOpExpression [left=Identifier [name=lx], operator="-", right=ConstantLiteral [value=1]]
                          Identifier [name=lx]
                          ConstantLiteral [value=1]
                        Identifier [name=ly]
                ProcedureCall [procedureName=RectFill, arguments=[InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]]]]
                  NodeList
                    InfixOpExpression [left=Identifier [name=lx], operator="-", right=Identifier [name=sz]]
                      Identifier [name=lx]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=ly], operator="-", right=Identifier [name=sz]]
                      Identifier [name=ly]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=lx], operator="+", right=Identifier [name=sz]]
                      Identifier [name=lx]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=ly], operator="+", right=Identifier [name=sz]]
                      Identifier [name=ly]
                      Identifier [name=sz]
                IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator=">", right=ConstantLiteral [value=10]], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=FalseBlock]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Ice]]]]
                  InfixOpExpression [left=Identifier [name=c], operator=">", right=ConstantLiteral [value=10]]
                    Identifier [name=c]
                    ConstantLiteral [value=10]
                  NodeList
                    Assignement [target=Identifier [name=val], value=Identifier [name=FalseBlock]]
                      Identifier [name=val]
                      Identifier [name=FalseBlock]
                  NodeList
                    Assignement [target=Identifier [name=val], value=Identifier [name=Ice]]
                      Identifier [name=val]
                      Identifier [name=Ice]
                ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=lx], Identifier [name=ly], Identifier [name=sz], Identifier [name=at], Identifier [name=val]]]
                  NodeList
                    Identifier [name=lx]
                    Identifier [name=ly]
                    Identifier [name=sz]
                    Identifier [name=at]
                    Identifier [name=val]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=2]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=2]]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=2]]
              Identifier [name=W]
              ConstantLiteral [value=2]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=2]]
              Identifier [name=H]
              ConstantLiteral [value=2]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]], Identifier [name=OnlyWall], Identifier [name=SimpleBlock], InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=256]]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=W]
              ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=H]
              ConstantLiteral [value=1]
            Identifier [name=OnlyWall]
            Identifier [name=SimpleBlock]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=256]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=256]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]], Identifier [name=OnlyWall], Identifier [name=BigBlock], InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=256]]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=W]
              ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=H]
              ConstantLiteral [value=1]
            Identifier [name=OnlyWall]
            Identifier [name=BigBlock]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=256]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=256]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]], Identifier [name=OnlyWall], Identifier [name=Leaf2], InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=64]]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=W]
              ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=H]
              ConstantLiteral [value=1]
            Identifier [name=OnlyWall]
            Identifier [name=Leaf2]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=64]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=64]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]], Identifier [name=OnlyWall], Identifier [name=Leaf3], InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=32]]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=W]
              ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=H]
              ConstantLiteral [value=1]
            Identifier [name=OnlyWall]
            Identifier [name=Leaf3]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=32]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=32]
        ProcedureCall [procedureName=PutRandomObjs, arguments=[Identifier [name=BONUS], Identifier [name=BonusLevel], Identifier [name=tbBonusLevel], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=BONUS]
            Identifier [name=BonusLevel]
            Identifier [name=tbBonusLevel]
            ConstantLiteral [value=1]
        IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]]), operator="AND", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="=", right=ConstantLiteral [value=0]])], thenStatements=[ProcedureCall [procedureName=PutRandomObjs, arguments=[Identifier [name=ALIEN3], Identifier [name=bSisterAlien], ConstantLiteral [value=0], ConstantLiteral [value=1]]]], elseifs=[], elseStatements=[]]
          InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]]), operator="AND", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="=", right=ConstantLiteral [value=0]])]
            (InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]])
              InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]]
                Identifier [name=stages]
                ConstantLiteral [value=0]
            (InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="=", right=ConstantLiteral [value=0]])
              InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="=", right=ConstantLiteral [value=0]]
                InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]
                  FunctionCall [functionName=RND, arguments=[]]
                  ConstantLiteral [value=4]
                ConstantLiteral [value=0]
          NodeList
            ProcedureCall [procedureName=PutRandomObjs, arguments=[Identifier [name=ALIEN3], Identifier [name=bSisterAlien], ConstantLiteral [value=0], ConstantLiteral [value=1]]]
              NodeList
                Identifier [name=ALIEN3]
                Identifier [name=bSisterAlien]
                ConstantLiteral [value=0]
                ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutRandomObjs, arguments=[Identifier [name=SMARTBONUS], Identifier [name=sbExtraLife], ConstantLiteral [value=0], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=SMARTBONUS]
            Identifier [name=sbExtraLife]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=AddOptions, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=2]], InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=2]], ConstantLiteral [value=4], ConstantLiteral [value=4], ConstantLiteral [value=0], ConstantLiteral [value=2], ConstantLiteral [value=10], ConstantLiteral [value=0], ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            InfixOpExpression [left=Identifier [name=W], operator="-", right=ConstantLiteral [value=2]]
              Identifier [name=W]
              ConstantLiteral [value=2]
            InfixOpExpression [left=Identifier [name=H], operator="-", right=ConstantLiteral [value=2]]
              Identifier [name=H]
              ConstantLiteral [value=2]
            ConstantLiteral [value=4]
            ConstantLiteral [value=4]
            ConstantLiteral [value=0]
            ConstantLiteral [value=2]
            ConstantLiteral [value=10]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
    ProcedureImplementation [name=Forest, arguments=[], returnType=null]
      NodeList
        VariableDefinition [name=c, type=LiteralType [name=CARD16]]
        VariableDefinition [name=x, type=LiteralType [name=INT16]]
        VariableDefinition [name=y, type=LiteralType [name=INT16]]
        VariableDefinition [name=sz, type=LiteralType [name=INT16]]
        VariableDefinition [name=d, type=LiteralType [name=INT16]]
        VariableDefinition [name=angle, type=LiteralType [name=INT16]]
      NodeList
        ProcedureCall [procedureName=Clear, arguments=[ConstantLiteral [value=60], ConstantLiteral [value=60]]]
          NodeList
            ConstantLiteral [value=60]
            ConstantLiteral [value=60]
        Assignement [target=Identifier [name=rotate], value=Identifier [name=FALSE]]
          Identifier [name=rotate]
          Identifier [name=FALSE]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=NbBackground]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=59]
            ConstantLiteral [value=59]
            Identifier [name=NbBackground]
        ProcedureCall [procedureName=FillEllipse, arguments=[ConstantLiteral [value=26], ConstantLiteral [value=26], ConstantLiteral [value=8], ConstantLiteral [value=8], Identifier [name=Ground]]]
          NodeList
            ConstantLiteral [value=26]
            ConstantLiteral [value=26]
            ConstantLiteral [value=8]
            ConstantLiteral [value=8]
            Identifier [name=Ground]
        ProcedureCall [procedureName=PutPlayer, arguments=[ConstantLiteral [value=29], ConstantLiteral [value=29]]]
          NodeList
            ConstantLiteral [value=29]
            ConstantLiteral [value=29]
        ProcedureCall [procedureName=PutExit, arguments=[ConstantLiteral [value=30], ConstantLiteral [value=30]]]
          NodeList
            ConstantLiteral [value=30]
            ConstantLiteral [value=30]
        Assignement [target=Identifier [name=fillTypes], value=SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=fCartoon], Identifier [name=fNone], Identifier [name=fPic], Identifier [name=fAnims2], Identifier [name=fAnims3], Identifier [name=fAnims4]]]]
          Identifier [name=fillTypes]
          SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=fCartoon], Identifier [name=fNone], Identifier [name=fPic], Identifier [name=fAnims2], Identifier [name=fAnims3], Identifier [name=fAnims4]]]
            NodeList
              Identifier [name=fCartoon]
              Identifier [name=fNone]
              Identifier [name=fPic]
              Identifier [name=fAnims2]
              Identifier [name=fAnims3]
              Identifier [name=fAnims4]
        ForLoop [identifier=Identifier [name=c], fromExpression=ConstantLiteral [value=0], toExpression=ConstantLiteral [value=15], byExpression=null, statements=[Assignement [target=ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=c]]], value=ConstantLiteral [value=2]], Assignement [target=ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=c]]], value=ConstantLiteral [value=2]]]]
          ConstantLiteral [value=0]
          ConstantLiteral [value=15]
          NodeList
            Assignement [target=ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=c]]], value=ConstantLiteral [value=2]]
              ArrayAccess [array=Identifier [name=fillCount], indexes=[Identifier [name=c]]]
                Identifier [name=fillCount]
                NodeList
                  Identifier [name=c]
              ConstantLiteral [value=2]
            Assignement [target=ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=c]]], value=ConstantLiteral [value=2]]
              ArrayAccess [array=Identifier [name=fillRndAdd], indexes=[Identifier [name=c]]]
                Identifier [name=fillRndAdd]
                NodeList
                  Identifier [name=c]
              ConstantLiteral [value=2]
        Assignement [target=ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=2]]], value=Identifier [name=ALIEN2]]
          ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=2]]]
            Identifier [name=fKind]
            NodeList
              ConstantLiteral [value=2]
          Identifier [name=ALIEN2]
        Assignement [target=ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=2]]], value=Identifier [name=cNest]]
          ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=2]]]
            Identifier [name=fSubKind]
            NodeList
              ConstantLiteral [value=2]
          Identifier [name=cNest]
        Assignement [target=ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=2]]], value=ConstantLiteral [value=0]]
          ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=2]]]
            Identifier [name=aStat]
            NodeList
              ConstantLiteral [value=2]
          ConstantLiteral [value=0]
        Assignement [target=ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=3]]], value=Identifier [name=MACHINE]]
          ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=3]]]
            Identifier [name=fKind]
            NodeList
              ConstantLiteral [value=3]
          Identifier [name=MACHINE]
        Assignement [target=ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=3]]], value=Identifier [name=mTurret]]
          ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=3]]]
            Identifier [name=fSubKind]
            NodeList
              ConstantLiteral [value=3]
          Identifier [name=mTurret]
        Assignement [target=ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=3]]], value=ConstantLiteral [value=0]]
          ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=3]]]
            Identifier [name=aStat]
            NodeList
              ConstantLiteral [value=3]
          ConstantLiteral [value=0]
        Assignement [target=ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=4]]], value=Identifier [name=ALIEN1]]
          ArrayAccess [array=Identifier [name=fKind], indexes=[ConstantLiteral [value=4]]]
            Identifier [name=fKind]
            NodeList
              ConstantLiteral [value=4]
          Identifier [name=ALIEN1]
        Assignement [target=ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=4]]], value=Identifier [name=aTrefle]]
          ArrayAccess [array=Identifier [name=fSubKind], indexes=[ConstantLiteral [value=4]]]
            Identifier [name=fSubKind]
            NodeList
              ConstantLiteral [value=4]
          Identifier [name=aTrefle]
        Assignement [target=ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=4]]], value=Identifier [name=pLife4]]
          ArrayAccess [array=Identifier [name=aStat], indexes=[ConstantLiteral [value=4]]]
            Identifier [name=aStat]
            NodeList
              ConstantLiteral [value=4]
          Identifier [name=pLife4]
        ForLoop [identifier=Identifier [name=c], fromExpression=ConstantLiteral [value=1], toExpression=ConstantLiteral [value=45], byExpression=null, statements=[Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="+", right=ConstantLiteral [value=1]]], Assignement [target=Identifier [name=d], value=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]], IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=sz], ConstantLiteral [value=10], Identifier [name=angle], Identifier [name=x], Identifier [name=y], Identifier [name=TRUE]]], thenStatements=[ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Ground]]], ProcedureCall [procedureName=RectFill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]]], ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=sz], Identifier [name=angle], Identifier [name=Ground2]]]], elseifs=[], elseStatements=[]]]]
          ConstantLiteral [value=1]
          ConstantLiteral [value=45]
          NodeList
            Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="+", right=ConstantLiteral [value=1]]]
              Identifier [name=sz]
              InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="+", right=ConstantLiteral [value=1]]
                InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]
                  FunctionCall [functionName=RND, arguments=[]]
                  ConstantLiteral [value=4]
                ConstantLiteral [value=1]
            Assignement [target=Identifier [name=d], value=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]]
              Identifier [name=d]
              InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]
                InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]]
                  Identifier [name=sz]
                  ConstantLiteral [value=2]
                ConstantLiteral [value=1]
            IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=sz], ConstantLiteral [value=10], Identifier [name=angle], Identifier [name=x], Identifier [name=y], Identifier [name=TRUE]]], thenStatements=[ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Ground]]], ProcedureCall [procedureName=RectFill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]]], ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=sz], Identifier [name=angle], Identifier [name=Ground2]]]], elseifs=[], elseStatements=[]]
              FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=sz], ConstantLiteral [value=10], Identifier [name=angle], Identifier [name=x], Identifier [name=y], Identifier [name=TRUE]]]
              NodeList
                ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Ground]]]
                  NodeList
                    InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                      Identifier [name=x]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                      Identifier [name=y]
                      Identifier [name=sz]
                    Identifier [name=d]
                    Identifier [name=d]
                    Identifier [name=Ground]
                ProcedureCall [procedureName=RectFill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]]]
                  NodeList
                    InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                      Identifier [name=x]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                      Identifier [name=y]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]]
                      Identifier [name=x]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]
                      Identifier [name=y]
                      Identifier [name=sz]
                ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=sz], Identifier [name=angle], Identifier [name=Ground2]]]
                  NodeList
                    Identifier [name=x]
                    Identifier [name=y]
                    Identifier [name=sz]
                    Identifier [name=angle]
                    Identifier [name=Ground2]
        ProcedureCall [procedureName=FillRandom, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=Forest1], Identifier [name=Forest7], Identifier [name=OnlyWall], Identifier [name=Rnd]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=59]
            ConstantLiteral [value=59]
            Identifier [name=Forest1]
            Identifier [name=Forest7]
            Identifier [name=OnlyWall]
            Identifier [name=Rnd]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=26], ConstantLiteral [value=26], ConstantLiteral [value=33], ConstantLiteral [value=33]]]
          NodeList
            ConstantLiteral [value=26]
            ConstantLiteral [value=26]
            ConstantLiteral [value=33]
            ConstantLiteral [value=33]
        ForLoop [identifier=Identifier [name=c], fromExpression=ConstantLiteral [value=2], toExpression=ConstantLiteral [value=4], byExpression=null, statements=[ProcedureCall [procedureName=PutRandomObjs, arguments=[ArrayAccess [array=Identifier [name=fKind], indexes=[Identifier [name=c]]], ArrayAccess [array=Identifier [name=fSubKind], indexes=[Identifier [name=c]]], ArrayAccess [array=Identifier [name=aStat], indexes=[Identifier [name=c]]], ConstantLiteral [value=12]]]]]
          ConstantLiteral [value=2]
          ConstantLiteral [value=4]
          NodeList
            ProcedureCall [procedureName=PutRandomObjs, arguments=[ArrayAccess [array=Identifier [name=fKind], indexes=[Identifier [name=c]]], ArrayAccess [array=Identifier [name=fSubKind], indexes=[Identifier [name=c]]], ArrayAccess [array=Identifier [name=aStat], indexes=[Identifier [name=c]]], ConstantLiteral [value=12]]]
              NodeList
                ArrayAccess [array=Identifier [name=fKind], indexes=[Identifier [name=c]]]
                  Identifier [name=fKind]
                  NodeList
                    Identifier [name=c]
                ArrayAccess [array=Identifier [name=fSubKind], indexes=[Identifier [name=c]]]
                  Identifier [name=fSubKind]
                  NodeList
                    Identifier [name=c]
                ArrayAccess [array=Identifier [name=aStat], indexes=[Identifier [name=c]]]
                  Identifier [name=aStat]
                  NodeList
                    Identifier [name=c]
                ConstantLiteral [value=12]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
        ProcedureCall [procedureName=PutBullet, arguments=[ConstantLiteral [value=10]]]
          NodeList
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=aHospital], Identifier [name=pLife4], ConstantLiteral [value=10]]]
          NodeList
            Identifier [name=aHospital]
            Identifier [name=pLife4]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=PutSleeper, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutInvinsibility, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutFreeFire, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        IfStatement [condition=InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=2]], thenStatements=[ProcedureCall [procedureName=PutRandomObjs, arguments=[Identifier [name=SMARTBONUS], Identifier [name=sbExtraPower], ConstantLiteral [value=0], ConstantLiteral [value=1]]]], elseifs=[], elseStatements=[]]
          InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=2]]
            Identifier [name=powerCountDown]
            ConstantLiteral [value=2]
          NodeList
            ProcedureCall [procedureName=PutRandomObjs, arguments=[Identifier [name=SMARTBONUS], Identifier [name=sbExtraPower], ConstantLiteral [value=0], ConstantLiteral [value=1]]]
              NodeList
                Identifier [name=SMARTBONUS]
                Identifier [name=sbExtraPower]
                ConstantLiteral [value=0]
                ConstantLiteral [value=1]
        IfStatement [condition=InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbNoMissile], ConstantLiteral [value=1]]]], elseifs=[], elseStatements=[]]
          InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]]
            Identifier [name=stages]
            ConstantLiteral [value=0]
          NodeList
            ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbNoMissile], ConstantLiteral [value=1]]]
              NodeList
                Identifier [name=tbNoMissile]
                ConstantLiteral [value=1]
        ProcedureCall [procedureName=AddOptions, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58], ConstantLiteral [value=0], ConstantLiteral [value=10], ConstantLiteral [value=2], ConstantLiteral [value=10], ConstantLiteral [value=10], ConstantLiteral [value=4], ConstantLiteral [value=0]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
            ConstantLiteral [value=0]
            ConstantLiteral [value=10]
            ConstantLiteral [value=2]
            ConstantLiteral [value=10]
            ConstantLiteral [value=10]
            ConstantLiteral [value=4]
            ConstantLiteral [value=0]
    ProcedureImplementation [name=ZCastle, arguments=[], returnType=null]
      NodeList
        VariableDefinition [name=val, type=LiteralType [name=CARD8]]
      NodeList
        ProcedureCall [procedureName=Cadre, arguments=[ConstantLiteral [value=40], ConstantLiteral [value=40]]]
          NodeList
            ConstantLiteral [value=40]
            ConstantLiteral [value=40]
        Assignement [target=Identifier [name=snow], value=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=5]]), operator="AND", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]])]]
          Identifier [name=snow]
          InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=5]]), operator="AND", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]])]
            (InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=5]])
              InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=5]]
                Identifier [name=difficulty]
                ConstantLiteral [value=5]
            (InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]])
              InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]]
                InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]
                  FunctionCall [functionName=RND, arguments=[]]
                  ConstantLiteral [value=3]
                ConstantLiteral [value=0]
        ProcedureCall [procedureName=DrawCastle, arguments=[ConstantLiteral [value=2], ConstantLiteral [value=1], ConstantLiteral [value=36], ConstantLiteral [value=37]]]
          NodeList
            ConstantLiteral [value=2]
            ConstantLiteral [value=1]
            ConstantLiteral [value=36]
            ConstantLiteral [value=37]
        ProcedureCall [procedureName=FillCond, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=39], ConstantLiteral [value=39], Identifier [name=OnlyWall], Identifier [name=SimpleBlock]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=39]
            ConstantLiteral [value=39]
            Identifier [name=OnlyWall]
            Identifier [name=SimpleBlock]
        IfStatement [condition=Identifier [name=dualpf], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=BackNone]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back4x4]]]]
          Identifier [name=dualpf]
          NodeList
            Assignement [target=Identifier [name=val], value=Identifier [name=BackNone]]
              Identifier [name=val]
              Identifier [name=BackNone]
          NodeList
            Assignement [target=Identifier [name=val], value=Identifier [name=Back4x4]]
              Identifier [name=val]
              Identifier [name=Back4x4]
        ProcedureCall [procedureName=FillCond, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=39], ConstantLiteral [value=39], Identifier [name=OnlyBackground], Identifier [name=val]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=39]
            ConstantLiteral [value=39]
            Identifier [name=OnlyBackground]
            Identifier [name=val]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=38], ConstantLiteral [value=38], Identifier [name=OnlyBackground], Identifier [name=Back8x8], ConstantLiteral [value=40]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
            Identifier [name=OnlyBackground]
            Identifier [name=Back8x8]
            ConstantLiteral [value=40]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=38], ConstantLiteral [value=38], Identifier [name=OnlyBackground], Identifier [name=Back2x2], ConstantLiteral [value=40]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
            Identifier [name=OnlyBackground]
            Identifier [name=Back2x2]
            ConstantLiteral [value=40]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=38], ConstantLiteral [value=38], Identifier [name=OnlyWall], Identifier [name=Sq4Block], ConstantLiteral [value=10]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
            Identifier [name=OnlyWall]
            Identifier [name=Sq4Block]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=38], ConstantLiteral [value=38], Identifier [name=OnlyWall], Identifier [name=BigBlock], ConstantLiteral [value=10]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
            Identifier [name=OnlyWall]
            Identifier [name=BigBlock]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=Put, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=18], Identifier [name=FalseBlock]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=18]
            Identifier [name=FalseBlock]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=38], ConstantLiteral [value=38], Identifier [name=OnlyWall], Identifier [name=FalseBlock], Identifier [name=difficulty]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
            Identifier [name=OnlyWall]
            Identifier [name=FalseBlock]
            Identifier [name=difficulty]
        ProcedureCall [procedureName=PutPlayer, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutExit, arguments=[ConstantLiteral [value=38], ConstantLiteral [value=38]]]
          NodeList
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=38], ConstantLiteral [value=19]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=38]
            ConstantLiteral [value=19]
        ProcedureCall [procedureName=PutQuad, arguments=[Identifier [name=pLife4], ConstantLiteral [value=20]]]
          NodeList
            Identifier [name=pLife4]
            ConstantLiteral [value=20]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=20], ConstantLiteral [value=38], ConstantLiteral [value=38]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=20]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
        ProcedureCall [procedureName=PutFour, arguments=[Identifier [name=pLife4], ConstantLiteral [value=30]]]
          NodeList
            Identifier [name=pLife4]
            ConstantLiteral [value=30]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=19], ConstantLiteral [value=38]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=19]
            ConstantLiteral [value=38]
        ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=aHospital], Identifier [name=pLife3], ConstantLiteral [value=8]]]
          NodeList
            Identifier [name=aHospital]
            Identifier [name=pLife3]
            ConstantLiteral [value=8]
        ProcedureCall [procedureName=PutBullet, arguments=[ConstantLiteral [value=8]]]
          NodeList
            ConstantLiteral [value=8]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=38], ConstantLiteral [value=38]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
        ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbHelp], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=tbHelp]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutCartoon, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=50]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=50]
        ProcedureCall [procedureName=PutIsolatedObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=doWindMaker], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=0], ConstantLiteral [value=3]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doWindMaker]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=0]
            ConstantLiteral [value=3]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=20], ConstantLiteral [value=1], ConstantLiteral [value=38], ConstantLiteral [value=25]]]
          NodeList
            ConstantLiteral [value=20]
            ConstantLiteral [value=1]
            ConstantLiteral [value=38]
            ConstantLiteral [value=25]
        ProcedureCall [procedureName=PutInvinsibility, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutSleeper, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbDBSpeed], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=tbDBSpeed]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=AddOptions, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=20], ConstantLiteral [value=38], ConstantLiteral [value=38], ConstantLiteral [value=1], ConstantLiteral [value=20], ConstantLiteral [value=1], ConstantLiteral [value=10], ConstantLiteral [value=10], ConstantLiteral [value=0], ConstantLiteral [value=0]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=20]
            ConstantLiteral [value=38]
            ConstantLiteral [value=38]
            ConstantLiteral [value=1]
            ConstantLiteral [value=20]
            ConstantLiteral [value=1]
            ConstantLiteral [value=10]
            ConstantLiteral [value=10]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
    ProcedureImplementation [name=Lights, arguments=[], returnType=null]
      NodeList
        VariableDefinition [name=x, type=LiteralType [name=INT16]]
        VariableDefinition [name=y, type=LiteralType [name=INT16]]
        VariableDefinition [name=z, type=LiteralType [name=INT16]]
        VariableDefinition [name=val, type=LiteralType [name=CARD8]]
      NodeList
        ProcedureCall [procedureName=Clear, arguments=[ConstantLiteral [value=127], ConstantLiteral [value=20]]]
          NodeList
            ConstantLiteral [value=127]
            ConstantLiteral [value=20]
        Assignement [target=Identifier [name=water], value=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=2]]), operator="AND", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=6]], operator="=", right=ConstantLiteral [value=0]])]]
          Identifier [name=water]
          InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=2]]), operator="AND", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=6]], operator="=", right=ConstantLiteral [value=0]])]
            (InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=2]])
              InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=2]]
                Identifier [name=difficulty]
                ConstantLiteral [value=2]
            (InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=6]], operator="=", right=ConstantLiteral [value=0]])
              InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=6]], operator="=", right=ConstantLiteral [value=0]]
                InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=6]]
                  FunctionCall [functionName=RND, arguments=[]]
                  ConstantLiteral [value=6]
                ConstantLiteral [value=0]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=39], ConstantLiteral [value=0], Identifier [name=BarLight]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=39]
            ConstantLiteral [value=0]
            Identifier [name=BarLight]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=19], Identifier [name=BarLight]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=19]
            Identifier [name=BarLight]
        ForLoop [identifier=Identifier [name=y], fromExpression=ConstantLiteral [value=0], toExpression=ConstantLiteral [value=19], byExpression=null, statements=[ForLoop [identifier=Identifier [name=x], fromExpression=ConstantLiteral [value=40], toExpression=ConstantLiteral [value=127], byExpression=null, statements=[Assignement [target=Identifier [name=z], value=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=15]], operator="+", right=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=30]]]]], IfStatement [condition=InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=60]], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=BackNone]]], elseifs=[ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=80]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back8x8]]]], ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=100]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back4x4]]]]], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back2x2]]]], ProcedureCall [procedureName=Put, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=val]]]]]]]
          ConstantLiteral [value=0]
          ConstantLiteral [value=19]
          NodeList
            ForLoop [identifier=Identifier [name=x], fromExpression=ConstantLiteral [value=40], toExpression=ConstantLiteral [value=127], byExpression=null, statements=[Assignement [target=Identifier [name=z], value=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=15]], operator="+", right=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=30]]]]], IfStatement [condition=InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=60]], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=BackNone]]], elseifs=[ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=80]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back8x8]]]], ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=100]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back4x4]]]]], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back2x2]]]], ProcedureCall [procedureName=Put, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=val]]]]]
              ConstantLiteral [value=40]
              ConstantLiteral [value=127]
              NodeList
                Assignement [target=Identifier [name=z], value=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=15]], operator="+", right=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=30]]]]]
                  Identifier [name=z]
                  InfixOpExpression [left=InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=15]], operator="+", right=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=30]]]]
                    InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=15]]
                      Identifier [name=x]
                      ConstantLiteral [value=15]
                    FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=30]]]
                IfStatement [condition=InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=60]], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=BackNone]]], elseifs=[ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=80]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back8x8]]]], ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=100]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back4x4]]]]], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back2x2]]]]
                  InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=60]]
                    Identifier [name=z]
                    ConstantLiteral [value=60]
                  NodeList
                    Assignement [target=Identifier [name=val], value=Identifier [name=BackNone]]
                      Identifier [name=val]
                      Identifier [name=BackNone]
                  ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=80]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back8x8]]]]
                    InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=80]]
                      Identifier [name=z]
                      ConstantLiteral [value=80]
                    NodeList
                      Assignement [target=Identifier [name=val], value=Identifier [name=Back8x8]]
                        Identifier [name=val]
                        Identifier [name=Back8x8]
                  ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=100]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Back4x4]]]]
                    InfixOpExpression [left=Identifier [name=z], operator="<", right=ConstantLiteral [value=100]]
                      Identifier [name=z]
                      ConstantLiteral [value=100]
                    NodeList
                      Assignement [target=Identifier [name=val], value=Identifier [name=Back4x4]]
                        Identifier [name=val]
                        Identifier [name=Back4x4]
                  NodeList
                    Assignement [target=Identifier [name=val], value=Identifier [name=Back2x2]]
                      Identifier [name=val]
                      Identifier [name=Back2x2]
                ProcedureCall [procedureName=Put, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=val]]]
                  NodeList
                    Identifier [name=x]
                    Identifier [name=y]
                    Identifier [name=val]
        ProcedureCall [procedureName=DrawBoxes, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=40], ConstantLiteral [value=20]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=40]
            ConstantLiteral [value=20]
        ProcedureCall [procedureName=Put, arguments=[ConstantLiteral [value=39], ConstantLiteral [value=18], ConstantLiteral [value=0]]]
          NodeList
            ConstantLiteral [value=39]
            ConstantLiteral [value=18]
            ConstantLiteral [value=0]
        ProcedureCall [procedureName=FillCond, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=39], ConstantLiteral [value=19], Identifier [name=OnlyBackground], Identifier [name=Light]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=39]
            ConstantLiteral [value=19]
            Identifier [name=OnlyBackground]
            Identifier [name=Light]
        ProcedureCall [procedureName=FillCond, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=39], ConstantLiteral [value=19], Identifier [name=OnlyWall], Identifier [name=BarLight]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=39]
            ConstantLiteral [value=19]
            Identifier [name=OnlyWall]
            Identifier [name=BarLight]
        ProcedureCall [procedureName=PutPlayer, arguments=[ConstantLiteral [value=38], ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=38]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutExit, arguments=[ConstantLiteral [value=39], ConstantLiteral [value=18]]]
          NodeList
            ConstantLiteral [value=39]
            ConstantLiteral [value=18]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=50], ConstantLiteral [value=0], ConstantLiteral [value=127], ConstantLiteral [value=19]]]
          NodeList
            ConstantLiteral [value=50]
            ConstantLiteral [value=0]
            ConstantLiteral [value=127]
            ConstantLiteral [value=19]
        ProcedureCall [procedureName=PutMoney, arguments=[SetExpression [setType=LiteralType [name=MoneySet], setValues=[Identifier [name=st]]], ConstantLiteral [value=15]]]
          NodeList
            SetExpression [setType=LiteralType [name=MoneySet], setValues=[Identifier [name=st]]]
              NodeList
                Identifier [name=st]
            ConstantLiteral [value=15]
        IfStatement [condition=InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=2]], thenStatements=[ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbDBSpeed], ConstantLiteral [value=45], ConstantLiteral [value=16]]], ProcedureCall [procedureName=PutExtraPower, arguments=[ConstantLiteral [value=2], ConstantLiteral [value=126], ConstantLiteral [value=18]]]], elseifs=[], elseStatements=[]]
          InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=2]]
            Identifier [name=powerCountDown]
            ConstantLiteral [value=2]
          NodeList
            ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbDBSpeed], ConstantLiteral [value=45], ConstantLiteral [value=16]]]
              NodeList
                Identifier [name=tbDBSpeed]
                ConstantLiteral [value=45]
                ConstantLiteral [value=16]
            ProcedureCall [procedureName=PutExtraPower, arguments=[ConstantLiteral [value=2], ConstantLiteral [value=126], ConstantLiteral [value=18]]]
              NodeList
                ConstantLiteral [value=2]
                ConstantLiteral [value=126]
                ConstantLiteral [value=18]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=38], ConstantLiteral [value=18]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=38]
            ConstantLiteral [value=18]
        ProcedureCall [procedureName=PutIsolatedObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=doMirror], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=0], ConstantLiteral [value=10]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doMirror]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=0]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=30], ConstantLiteral [value=18]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=30]
            ConstantLiteral [value=18]
        ProcedureCall [procedureName=PutMagnetR, arguments=[ConstantLiteral [value=3], ConstantLiteral [value=8]]]
          NodeList
            ConstantLiteral [value=3]
            ConstantLiteral [value=8]
        ProcedureCall [procedureName=PutMagnetA, arguments=[ConstantLiteral [value=2], ConstantLiteral [value=8]]]
          NodeList
            ConstantLiteral [value=2]
            ConstantLiteral [value=8]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=38], ConstantLiteral [value=9]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=38]
            ConstantLiteral [value=9]
        ProcedureCall [procedureName=PutIsolatedObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=doWindMaker], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=0], ConstantLiteral [value=3]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doWindMaker]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=0]
            ConstantLiteral [value=3]
        ProcedureCall [procedureName=PutIsolatedObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=doBubbleMaker], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=0], ConstantLiteral [value=3]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doBubbleMaker]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=0]
            ConstantLiteral [value=3]
        ProcedureCall [procedureName=PutIsolatedObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=doFireMaker], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=0], ConstantLiteral [value=3]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doFireMaker]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=0]
            ConstantLiteral [value=3]
        ProcedureCall [procedureName=PutChaosObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=doSand], ConstantLiteral [value=0], Identifier [name=BW], Identifier [name=BH], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=8]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=8]], ConstantLiteral [value=16]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doSand]
            ConstantLiteral [value=0]
            Identifier [name=BW]
            Identifier [name=BH]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=8]]
              Identifier [name=BW]
              ConstantLiteral [value=8]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=8]]
              Identifier [name=BH]
              ConstantLiteral [value=8]
            ConstantLiteral [value=16]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=9], ConstantLiteral [value=38], ConstantLiteral [value=17]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=9]
            ConstantLiteral [value=38]
            ConstantLiteral [value=17]
        ProcedureCall [procedureName=PutDeltaObjs, arguments=[Identifier [name=MACHINE], Identifier [name=mCannon1], ConstantLiteral [value=0], MinusExpression [target=ConstantLiteral [value=1]], MinusExpression [target=ConstantLiteral [value=1]], ConstantLiteral [value=3]]]
          NodeList
            Identifier [name=MACHINE]
            Identifier [name=mCannon1]
            ConstantLiteral [value=0]
            MinusExpression [target=ConstantLiteral [value=1]]
              ConstantLiteral [value=1]
            MinusExpression [target=ConstantLiteral [value=1]]
              ConstantLiteral [value=1]
            ConstantLiteral [value=3]
        ProcedureCall [procedureName=PutDeltaObjs, arguments=[Identifier [name=MACHINE], Identifier [name=mCannon1], ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=3]]]
          NodeList
            Identifier [name=MACHINE]
            Identifier [name=mCannon1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=3]
        ProcedureCall [procedureName=PutDeltaObjs, arguments=[Identifier [name=MACHINE], Identifier [name=mCannon2], ConstantLiteral [value=0], MinusExpression [target=ConstantLiteral [value=1]], MinusExpression [target=ConstantLiteral [value=1]], ConstantLiteral [value=3]]]
          NodeList
            Identifier [name=MACHINE]
            Identifier [name=mCannon2]
            ConstantLiteral [value=0]
            MinusExpression [target=ConstantLiteral [value=1]]
              ConstantLiteral [value=1]
            MinusExpression [target=ConstantLiteral [value=1]]
              ConstantLiteral [value=1]
            ConstantLiteral [value=3]
        ProcedureCall [procedureName=PutDeltaObjs, arguments=[Identifier [name=MACHINE], Identifier [name=mCannon2], ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=3]]]
          NodeList
            Identifier [name=MACHINE]
            Identifier [name=mCannon2]
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=3]
        ProcedureCall [procedureName=PutTurret, arguments=[ConstantLiteral [value=2]]]
          NodeList
            ConstantLiteral [value=2]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=38], ConstantLiteral [value=18]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=38]
            ConstantLiteral [value=18]
        ProcedureCall [procedureName=PutCreatorC, arguments=[ConstantLiteral [value=12]]]
          NodeList
            ConstantLiteral [value=12]
        ProcedureCall [procedureName=PutCartoon, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=2], ConstantLiteral [value=20]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=2]
            ConstantLiteral [value=20]
        ProcedureCall [procedureName=PutBullet, arguments=[ConstantLiteral [value=8]]]
          NodeList
            ConstantLiteral [value=8]
        ProcedureCall [procedureName=PutHospital, arguments=[ConstantLiteral [value=5]]]
          NodeList
            ConstantLiteral [value=5]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=25], ConstantLiteral [value=12], ConstantLiteral [value=38], ConstantLiteral [value=18]]]
          NodeList
            ConstantLiteral [value=25]
            ConstantLiteral [value=12]
            ConstantLiteral [value=38]
            ConstantLiteral [value=18]
        ProcedureCall [procedureName=PutMagnet, arguments=[ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=DEADOBJ], Identifier [name=doMagnetA], ConstantLiteral [value=3], ConstantLiteral [value=50], ConstantLiteral [value=10]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doMagnetA]
            ConstantLiteral [value=3]
            ConstantLiteral [value=50]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=DEADOBJ], Identifier [name=doMagnetA], ConstantLiteral [value=3], ConstantLiteral [value=50], ConstantLiteral [value=10]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doMagnetA]
            ConstantLiteral [value=3]
            ConstantLiteral [value=50]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=PutExit, arguments=[ConstantLiteral [value=50], ConstantLiteral [value=10]]]
          NodeList
            ConstantLiteral [value=50]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=AddOptions, arguments=[ConstantLiteral [value=60], ConstantLiteral [value=1], ConstantLiteral [value=120], ConstantLiteral [value=18], ConstantLiteral [value=4], ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=8], ConstantLiteral [value=10], ConstantLiteral [value=1], ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=60]
            ConstantLiteral [value=1]
            ConstantLiteral [value=120]
            ConstantLiteral [value=18]
            ConstantLiteral [value=4]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=8]
            ConstantLiteral [value=10]
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
    ProcedureImplementation [name=RndRect, arguments=[FormalArgument [var=true, name=x, type=LiteralType [name=INT16]], FormalArgument [var=true, name=y, type=LiteralType [name=INT16]], FormalArgument [var=true, name=a, type=LiteralType [name=INT16]], FormalArgument [var=true, name=sz, type=LiteralType [name=INT16]], FormalArgument [var=true, name=d, type=LiteralType [name=INT16]], FormalArgument [var=true, name=dx, type=LiteralType [name=INT16]], FormalArgument [var=true, name=dy, type=LiteralType [name=INT16]], FormalArgument [var=true, name=c, type=LiteralType [name=CARD16]], FormalArgument [var=true, name=val, type=LiteralType [name=CARD8]]], returnType=null]
      NodeList
        Assignement [target=Identifier [name=x], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=51]]], operator="+", right=ConstantLiteral [value=4]]]
          Identifier [name=x]
          InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=51]]], operator="+", right=ConstantLiteral [value=4]]
            FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=51]]]
            ConstantLiteral [value=4]
        Assignement [target=Identifier [name=y], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=49]]], operator="+", right=ConstantLiteral [value=6]]]
          Identifier [name=y]
          InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=49]]], operator="+", right=ConstantLiteral [value=6]]
            FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=49]]]
            ConstantLiteral [value=6]
        ProcedureCall [procedureName=Rect, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=4]], InfixOpExpression [left=Identifier [name=y], operator="-", right=ConstantLiteral [value=4]], InfixOpExpression [left=Identifier [name=x], operator="+", right=ConstantLiteral [value=4]], InfixOpExpression [left=Identifier [name=y], operator="+", right=ConstantLiteral [value=4]]]]
          NodeList
            InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=4]]
              Identifier [name=x]
              ConstantLiteral [value=4]
            InfixOpExpression [left=Identifier [name=y], operator="-", right=ConstantLiteral [value=4]]
              Identifier [name=y]
              ConstantLiteral [value=4]
            InfixOpExpression [left=Identifier [name=x], operator="+", right=ConstantLiteral [value=4]]
              Identifier [name=x]
              ConstantLiteral [value=4]
            InfixOpExpression [left=Identifier [name=y], operator="+", right=ConstantLiteral [value=4]]
              Identifier [name=y]
              ConstantLiteral [value=4]
    ProcedureImplementation [name=Plain, arguments=[], returnType=null]
      NodeList
        VariableDefinition [name=x, type=LiteralType [name=INT16]]
        VariableDefinition [name=y, type=LiteralType [name=INT16]]
        VariableDefinition [name=a, type=LiteralType [name=INT16]]
        VariableDefinition [name=sz, type=LiteralType [name=INT16]]
        VariableDefinition [name=d, type=LiteralType [name=INT16]]
        VariableDefinition [name=dx, type=LiteralType [name=INT16]]
        VariableDefinition [name=dy, type=LiteralType [name=INT16]]
        VariableDefinition [name=c, type=LiteralType [name=CARD16]]
        VariableDefinition [name=val, type=LiteralType [name=CARD8]]
      NodeList
        ProcedureCall [procedureName=Cadre, arguments=[ConstantLiteral [value=60], ConstantLiteral [value=60]]]
          NodeList
            ConstantLiteral [value=60]
            ConstantLiteral [value=60]
        ProcedureCall [procedureName=Clear, arguments=[ConstantLiteral [value=60], ConstantLiteral [value=70]]]
          NodeList
            ConstantLiteral [value=60]
            ConstantLiteral [value=70]
        ProcedureCall [procedureName=FillCond, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=OnlyWall], Identifier [name=SimpleBlock]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=59]
            ConstantLiteral [value=59]
            Identifier [name=OnlyWall]
            Identifier [name=SimpleBlock]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=60], ConstantLiteral [value=59], ConstantLiteral [value=69], Identifier [name=BackNone]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=60]
            ConstantLiteral [value=59]
            ConstantLiteral [value=69]
            Identifier [name=BackNone]
        ForLoop [identifier=Identifier [name=c], fromExpression=ConstantLiteral [value=1], toExpression=InfixOpExpression [left=ConstantLiteral [value=4], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=16]]], byExpression=null, statements=[Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="+", right=ConstantLiteral [value=1]]], Assignement [target=Identifier [name=d], value=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]], IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58], Identifier [name=sz], ConstantLiteral [value=0], Identifier [name=a], Identifier [name=x], Identifier [name=y], Identifier [name=FALSE]]], thenStatements=[Assignement [target=Identifier [name=val], value=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]], CaseStatement [expression=Identifier [name=val], cases=[CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=0], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Sq1Block]]]], CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=1], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=EmptyBlock]]]]]], IfStatement [condition=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=val]]]], elseifs=[], elseStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=val]]]]], IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=val], operator="=", right=Identifier [name=EmptyBlock]]), operator="AND", right=(InfixOpExpression [left=Identifier [name=c], operator=">", right=ConstantLiteral [value=10]])], thenStatements=[ProcedureCall [procedureName=Put, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], Identifier [name=y], Identifier [name=FalseEmpty]]], ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]], ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=FalseEmpty]]], IfStatement [condition=InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbNoMissile], Identifier [name=x], Identifier [name=y]]]], elseifs=[], elseStatements=[]]], elseifs=[ElseIfStatement [condition=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]], statements=[Assignement [target=Identifier [name=dx], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]], operator="-", right=ConstantLiteral [value=1]]], Assignement [target=Identifier [name=dy], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]], operator="-", right=ConstantLiteral [value=1]]], IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=dx], operator="<>", right=ConstantLiteral [value=0]]), operator="OR", right=(InfixOpExpression [left=Identifier [name=dy], operator="<>", right=ConstantLiteral [value=0]])], thenStatements=[ProcedureCall [procedureName=DEC, arguments=[Identifier [name=d], ConstantLiteral [value=2]]], ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]], ProcedureCall [procedureName=INC, arguments=[Identifier [name=x], Identifier [name=dx]]], ProcedureCall [procedureName=INC, arguments=[Identifier [name=y], Identifier [name=dy]]], ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Ground]]]], elseifs=[], elseStatements=[]]]]], elseStatements=[]]], elseifs=[], elseStatements=[]]]]
          ConstantLiteral [value=1]
          InfixOpExpression [left=ConstantLiteral [value=4], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=16]]]
            ConstantLiteral [value=4]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=16]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=16]
          NodeList
            Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="+", right=ConstantLiteral [value=1]]]
              Identifier [name=sz]
              InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="+", right=ConstantLiteral [value=1]]
                InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]
                  FunctionCall [functionName=RND, arguments=[]]
                  ConstantLiteral [value=3]
                ConstantLiteral [value=1]
            Assignement [target=Identifier [name=d], value=InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]]
              Identifier [name=d]
              InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]
                InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]]
                  Identifier [name=sz]
                  ConstantLiteral [value=2]
                ConstantLiteral [value=1]
            IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58], Identifier [name=sz], ConstantLiteral [value=0], Identifier [name=a], Identifier [name=x], Identifier [name=y], Identifier [name=FALSE]]], thenStatements=[Assignement [target=Identifier [name=val], value=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]], CaseStatement [expression=Identifier [name=val], cases=[CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=0], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Sq1Block]]]], CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=1], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=EmptyBlock]]]]]], IfStatement [condition=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=val]]]], elseifs=[], elseStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=val]]]]], IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=val], operator="=", right=Identifier [name=EmptyBlock]]), operator="AND", right=(InfixOpExpression [left=Identifier [name=c], operator=">", right=ConstantLiteral [value=10]])], thenStatements=[ProcedureCall [procedureName=Put, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], Identifier [name=y], Identifier [name=FalseEmpty]]], ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]], ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=FalseEmpty]]], IfStatement [condition=InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbNoMissile], Identifier [name=x], Identifier [name=y]]]], elseifs=[], elseStatements=[]]], elseifs=[ElseIfStatement [condition=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]], statements=[Assignement [target=Identifier [name=dx], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]], operator="-", right=ConstantLiteral [value=1]]], Assignement [target=Identifier [name=dy], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]], operator="-", right=ConstantLiteral [value=1]]], IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=dx], operator="<>", right=ConstantLiteral [value=0]]), operator="OR", right=(InfixOpExpression [left=Identifier [name=dy], operator="<>", right=ConstantLiteral [value=0]])], thenStatements=[ProcedureCall [procedureName=DEC, arguments=[Identifier [name=d], ConstantLiteral [value=2]]], ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]], ProcedureCall [procedureName=INC, arguments=[Identifier [name=x], Identifier [name=dx]]], ProcedureCall [procedureName=INC, arguments=[Identifier [name=y], Identifier [name=dy]]], ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Ground]]]], elseifs=[], elseStatements=[]]]]], elseStatements=[]]], elseifs=[], elseStatements=[]]
              FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58], Identifier [name=sz], ConstantLiteral [value=0], Identifier [name=a], Identifier [name=x], Identifier [name=y], Identifier [name=FALSE]]]
              NodeList
                Assignement [target=Identifier [name=val], value=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]]
                  Identifier [name=val]
                  InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]
                    FunctionCall [functionName=RND, arguments=[]]
                    ConstantLiteral [value=4]
                CaseStatement [expression=Identifier [name=val], cases=[CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=0], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Sq1Block]]]], CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=1], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=EmptyBlock]]]]]]
                  Identifier [name=val]
                  NodeList
                    ConstantLiteral [value=0]
                  NodeList
                    Assignement [target=Identifier [name=val], value=Identifier [name=Sq1Block]]
                      Identifier [name=val]
                      Identifier [name=Sq1Block]
                  NodeList
                    ConstantLiteral [value=1]
                  NodeList
                    Assignement [target=Identifier [name=val], value=Identifier [name=EmptyBlock]]
                      Identifier [name=val]
                      Identifier [name=EmptyBlock]
                  NodeList
                    Assignement [target=Identifier [name=val], value=Identifier [name=Sq4Block]]
                      Identifier [name=val]
                      Identifier [name=Sq4Block]
                IfStatement [condition=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=val]]]], elseifs=[], elseStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=val]]]]]
                  InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]]
                    InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]
                      FunctionCall [functionName=RND, arguments=[]]
                      ConstantLiteral [value=3]
                    ConstantLiteral [value=0]
                  NodeList
                    ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=val]]]
                      NodeList
                        InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                          Identifier [name=x]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                          Identifier [name=y]
                          Identifier [name=sz]
                        Identifier [name=d]
                        Identifier [name=d]
                        Identifier [name=val]
                  NodeList
                    ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=val]]]
                      NodeList
                        InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                          Identifier [name=x]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                          Identifier [name=y]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]]
                          Identifier [name=x]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]
                          Identifier [name=y]
                          Identifier [name=sz]
                        Identifier [name=val]
                IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=val], operator="=", right=Identifier [name=EmptyBlock]]), operator="AND", right=(InfixOpExpression [left=Identifier [name=c], operator=">", right=ConstantLiteral [value=10]])], thenStatements=[ProcedureCall [procedureName=Put, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], Identifier [name=y], Identifier [name=FalseEmpty]]], ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]], ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=FalseEmpty]]], IfStatement [condition=InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbNoMissile], Identifier [name=x], Identifier [name=y]]]], elseifs=[], elseStatements=[]]], elseifs=[ElseIfStatement [condition=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]], statements=[Assignement [target=Identifier [name=dx], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]], operator="-", right=ConstantLiteral [value=1]]], Assignement [target=Identifier [name=dy], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]], operator="-", right=ConstantLiteral [value=1]]], IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=dx], operator="<>", right=ConstantLiteral [value=0]]), operator="OR", right=(InfixOpExpression [left=Identifier [name=dy], operator="<>", right=ConstantLiteral [value=0]])], thenStatements=[ProcedureCall [procedureName=DEC, arguments=[Identifier [name=d], ConstantLiteral [value=2]]], ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]], ProcedureCall [procedureName=INC, arguments=[Identifier [name=x], Identifier [name=dx]]], ProcedureCall [procedureName=INC, arguments=[Identifier [name=y], Identifier [name=dy]]], ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Ground]]]], elseifs=[], elseStatements=[]]]]], elseStatements=[]]
                  InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=val], operator="=", right=Identifier [name=EmptyBlock]]), operator="AND", right=(InfixOpExpression [left=Identifier [name=c], operator=">", right=ConstantLiteral [value=10]])]
                    (InfixOpExpression [left=Identifier [name=val], operator="=", right=Identifier [name=EmptyBlock]])
                      InfixOpExpression [left=Identifier [name=val], operator="=", right=Identifier [name=EmptyBlock]]
                        Identifier [name=val]
                        Identifier [name=EmptyBlock]
                    (InfixOpExpression [left=Identifier [name=c], operator=">", right=ConstantLiteral [value=10]])
                      InfixOpExpression [left=Identifier [name=c], operator=">", right=ConstantLiteral [value=10]]
                        Identifier [name=c]
                        ConstantLiteral [value=10]
                  NodeList
                    ProcedureCall [procedureName=Put, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], Identifier [name=y], Identifier [name=FalseEmpty]]]
                      NodeList
                        InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                          Identifier [name=x]
                          Identifier [name=sz]
                        Identifier [name=y]
                        Identifier [name=FalseEmpty]
                    ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]]
                      NodeList
                        Identifier [name=sz]
                    ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=FalseEmpty]]]
                      NodeList
                        InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                          Identifier [name=x]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                          Identifier [name=y]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]]
                          Identifier [name=x]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]
                          Identifier [name=y]
                          Identifier [name=sz]
                        Identifier [name=FalseEmpty]
                    IfStatement [condition=InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbNoMissile], Identifier [name=x], Identifier [name=y]]]], elseifs=[], elseStatements=[]]
                      InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]]
                        Identifier [name=stages]
                        ConstantLiteral [value=0]
                      NodeList
                        ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbNoMissile], Identifier [name=x], Identifier [name=y]]]
                          NodeList
                            Identifier [name=tbNoMissile]
                            Identifier [name=x]
                            Identifier [name=y]
                  ElseIfStatement [condition=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]], statements=[Assignement [target=Identifier [name=dx], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]], operator="-", right=ConstantLiteral [value=1]]], Assignement [target=Identifier [name=dy], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]], operator="-", right=ConstantLiteral [value=1]]], IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=dx], operator="<>", right=ConstantLiteral [value=0]]), operator="OR", right=(InfixOpExpression [left=Identifier [name=dy], operator="<>", right=ConstantLiteral [value=0]])], thenStatements=[ProcedureCall [procedureName=DEC, arguments=[Identifier [name=d], ConstantLiteral [value=2]]], ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]], ProcedureCall [procedureName=INC, arguments=[Identifier [name=x], Identifier [name=dx]]], ProcedureCall [procedureName=INC, arguments=[Identifier [name=y], Identifier [name=dy]]], ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Ground]]]], elseifs=[], elseStatements=[]]]]
                    InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="=", right=ConstantLiteral [value=0]]
                      InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]
                        FunctionCall [functionName=RND, arguments=[]]
                        ConstantLiteral [value=3]
                      ConstantLiteral [value=0]
                    NodeList
                      Assignement [target=Identifier [name=dx], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]], operator="-", right=ConstantLiteral [value=1]]]
                        Identifier [name=dx]
                        InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]], operator="-", right=ConstantLiteral [value=1]]
                          FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]]
                          ConstantLiteral [value=1]
                      Assignement [target=Identifier [name=dy], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]], operator="-", right=ConstantLiteral [value=1]]]
                        Identifier [name=dy]
                        InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]], operator="-", right=ConstantLiteral [value=1]]
                          FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=3]]]
                          ConstantLiteral [value=1]
                      IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=dx], operator="<>", right=ConstantLiteral [value=0]]), operator="OR", right=(InfixOpExpression [left=Identifier [name=dy], operator="<>", right=ConstantLiteral [value=0]])], thenStatements=[ProcedureCall [procedureName=DEC, arguments=[Identifier [name=d], ConstantLiteral [value=2]]], ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]], ProcedureCall [procedureName=INC, arguments=[Identifier [name=x], Identifier [name=dx]]], ProcedureCall [procedureName=INC, arguments=[Identifier [name=y], Identifier [name=dy]]], ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Ground]]]], elseifs=[], elseStatements=[]]
                        InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=dx], operator="<>", right=ConstantLiteral [value=0]]), operator="OR", right=(InfixOpExpression [left=Identifier [name=dy], operator="<>", right=ConstantLiteral [value=0]])]
                          (InfixOpExpression [left=Identifier [name=dx], operator="<>", right=ConstantLiteral [value=0]])
                            InfixOpExpression [left=Identifier [name=dx], operator="<>", right=ConstantLiteral [value=0]]
                              Identifier [name=dx]
                              ConstantLiteral [value=0]
                          (InfixOpExpression [left=Identifier [name=dy], operator="<>", right=ConstantLiteral [value=0]])
                            InfixOpExpression [left=Identifier [name=dy], operator="<>", right=ConstantLiteral [value=0]]
                              Identifier [name=dy]
                              ConstantLiteral [value=0]
                        NodeList
                          ProcedureCall [procedureName=DEC, arguments=[Identifier [name=d], ConstantLiteral [value=2]]]
                            NodeList
                              Identifier [name=d]
                              ConstantLiteral [value=2]
                          ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]]
                            NodeList
                              Identifier [name=sz]
                          ProcedureCall [procedureName=INC, arguments=[Identifier [name=x], Identifier [name=dx]]]
                            NodeList
                              Identifier [name=x]
                              Identifier [name=dx]
                          ProcedureCall [procedureName=INC, arguments=[Identifier [name=y], Identifier [name=dy]]]
                            NodeList
                              Identifier [name=y]
                              Identifier [name=dy]
                          ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], Identifier [name=d], Identifier [name=d], Identifier [name=Ground]]]
                            NodeList
                              InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                                Identifier [name=x]
                                Identifier [name=sz]
                              InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                                Identifier [name=y]
                                Identifier [name=sz]
                              Identifier [name=d]
                              Identifier [name=d]
                              Identifier [name=Ground]
        ForLoop [identifier=Identifier [name=c], fromExpression=ConstantLiteral [value=1], toExpression=InfixOpExpression [left=ConstantLiteral [value=4], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=32]]], byExpression=null, statements=[Assignement [target=Identifier [name=val], value=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]], CaseStatement [expression=Identifier [name=val], cases=[CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=0], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=BigBlock]]]], CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=1], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Leaf3]]]], CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=2], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Fade3]]]], CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=3], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=RGBBlock]]]]]], ProcedureCall [procedureName=PutCross, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58], Identifier [name=val]]]]]
          ConstantLiteral [value=1]
          InfixOpExpression [left=ConstantLiteral [value=4], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=32]]]
            ConstantLiteral [value=4]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=32]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=32]
          NodeList
            Assignement [target=Identifier [name=val], value=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]]
              Identifier [name=val]
              InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]
                FunctionCall [functionName=RND, arguments=[]]
                ConstantLiteral [value=4]
            CaseStatement [expression=Identifier [name=val], cases=[CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=0], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=BigBlock]]]], CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=1], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Leaf3]]]], CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=2], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=Fade3]]]], CaseItem[labels=[CaseLabel[expr=ConstantLiteral [value=3], toExpr=null]], statements=[Assignement [target=Identifier [name=val], value=Identifier [name=RGBBlock]]]]]]
              Identifier [name=val]
              NodeList
                ConstantLiteral [value=0]
              NodeList
                Assignement [target=Identifier [name=val], value=Identifier [name=BigBlock]]
                  Identifier [name=val]
                  Identifier [name=BigBlock]
              NodeList
                ConstantLiteral [value=1]
              NodeList
                Assignement [target=Identifier [name=val], value=Identifier [name=Leaf3]]
                  Identifier [name=val]
                  Identifier [name=Leaf3]
              NodeList
                ConstantLiteral [value=2]
              NodeList
                Assignement [target=Identifier [name=val], value=Identifier [name=Fade3]]
                  Identifier [name=val]
                  Identifier [name=Fade3]
              NodeList
                ConstantLiteral [value=3]
              NodeList
                Assignement [target=Identifier [name=val], value=Identifier [name=RGBBlock]]
                  Identifier [name=val]
                  Identifier [name=RGBBlock]
            ProcedureCall [procedureName=PutCross, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58], Identifier [name=val]]]
              NodeList
                ConstantLiteral [value=1]
                ConstantLiteral [value=1]
                ConstantLiteral [value=58]
                ConstantLiteral [value=58]
                Identifier [name=val]
        ProcedureCall [procedureName=FillCond, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58], Identifier [name=OnlyBackground], Identifier [name=Ground]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
            Identifier [name=OnlyBackground]
            Identifier [name=Ground]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58], Identifier [name=OnlyBackground], Identifier [name=Ground2], ConstantLiteral [value=180]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
            Identifier [name=OnlyBackground]
            Identifier [name=Ground2]
            ConstantLiteral [value=180]
        ProcedureCall [procedureName=Put, arguments=[InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=58]]], operator="+", right=ConstantLiteral [value=1]], ConstantLiteral [value=59], Identifier [name=FalseBlock]]]
          NodeList
            InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=58]]], operator="+", right=ConstantLiteral [value=1]]
              FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=58]]]
              ConstantLiteral [value=1]
            ConstantLiteral [value=59]
            Identifier [name=FalseBlock]
        ProcedureCall [procedureName=PutPlayer, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutExit, arguments=[ConstantLiteral [value=58], ConstantLiteral [value=58]]]
          NodeList
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutABox, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=4]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=4]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutABox, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=4]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=4]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutNest, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=10]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutTri, arguments=[Identifier [name=pLife4], ConstantLiteral [value=8]]]
          NodeList
            Identifier [name=pLife4]
            ConstantLiteral [value=8]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=aStar], Identifier [name=pLife4], ConstantLiteral [value=15]]]
          NodeList
            Identifier [name=aStar]
            Identifier [name=pLife4]
            ConstantLiteral [value=15]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=aBubble], Identifier [name=pLife4], ConstantLiteral [value=15]]]
          NodeList
            Identifier [name=aBubble]
            Identifier [name=pLife4]
            ConstantLiteral [value=15]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutTrefle, arguments=[Identifier [name=pLife3], ConstantLiteral [value=10]]]
          NodeList
            Identifier [name=pLife3]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=aDiese], Identifier [name=pLife4], ConstantLiteral [value=15]]]
          NodeList
            Identifier [name=aDiese]
            Identifier [name=pLife4]
            ConstantLiteral [value=15]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutRAlien1, arguments=[Identifier [name=aKamikaze], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=10]]]
          NodeList
            Identifier [name=aKamikaze]
            ConstantLiteral [value=0]
            ConstantLiteral [value=3]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=aCartoon], ConstantLiteral [value=0], ConstantLiteral [value=20]]]
          NodeList
            Identifier [name=aCartoon]
            ConstantLiteral [value=0]
            ConstantLiteral [value=20]
        ProcedureCall [procedureName=RndRect, arguments=[]]
        ProcedureCall [procedureName=PutCartoon, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=2], ConstantLiteral [value=20]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=2]
            ConstantLiteral [value=20]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
        ProcedureCall [procedureName=PutHospital, arguments=[ConstantLiteral [value=6]]]
          NodeList
            ConstantLiteral [value=6]
        ProcedureCall [procedureName=PutBullet, arguments=[ConstantLiteral [value=6]]]
          NodeList
            ConstantLiteral [value=6]
        ProcedureCall [procedureName=PutIsolatedObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=doMirror], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=0], ConstantLiteral [value=5]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doMirror]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
            ConstantLiteral [value=0]
            ConstantLiteral [value=5]
        ProcedureCall [procedureName=PutIsolatedObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=doFireWall], ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=3]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doFireWall]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=3]
        IfStatement [condition=InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=1]], thenStatements=[ProcedureCall [procedureName=PutExtraPower, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=0], ConstantLiteral [value=69]]], ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbBullet], ConstantLiteral [value=0], ConstantLiteral [value=68]]], ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbBomb], ConstantLiteral [value=1], ConstantLiteral [value=69]]]], elseifs=[], elseStatements=[]]
          InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=1]]
            Identifier [name=powerCountDown]
            ConstantLiteral [value=1]
          NodeList
            ProcedureCall [procedureName=PutExtraPower, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=0], ConstantLiteral [value=69]]]
              NodeList
                ConstantLiteral [value=1]
                ConstantLiteral [value=0]
                ConstantLiteral [value=69]
            ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbBullet], ConstantLiteral [value=0], ConstantLiteral [value=68]]]
              NodeList
                Identifier [name=tbBullet]
                ConstantLiteral [value=0]
                ConstantLiteral [value=68]
            ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbBomb], ConstantLiteral [value=1], ConstantLiteral [value=69]]]
              NodeList
                Identifier [name=tbBomb]
                ConstantLiteral [value=1]
                ConstantLiteral [value=69]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=65], ConstantLiteral [value=59], ConstantLiteral [value=69]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=65]
            ConstantLiteral [value=59]
            ConstantLiteral [value=69]
        ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=aSmallDrawer], ConstantLiteral [value=60], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=aSmallDrawer]
            ConstantLiteral [value=60]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=AddOptions, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58], ConstantLiteral [value=5], ConstantLiteral [value=10], ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=4], ConstantLiteral [value=4]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
            ConstantLiteral [value=5]
            ConstantLiteral [value=10]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=4]
            ConstantLiteral [value=4]
        ProcedureCall [procedureName=AddOptions, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=69], ConstantLiteral [value=59], ConstantLiteral [value=69], ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=20], ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=0]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=69]
            ConstantLiteral [value=59]
            ConstantLiteral [value=69]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=20]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
    ProcedureImplementation [name=UnderWater, arguments=[], returnType=null]
      NodeList
        VariableDefinition [name=x, type=LiteralType [name=INT16]]
        VariableDefinition [name=y, type=LiteralType [name=INT16]]
        VariableDefinition [name=a, type=LiteralType [name=INT16]]
        VariableDefinition [name=sz, type=LiteralType [name=INT16]]
        VariableDefinition [name=c, type=LiteralType [name=CARD16]]
        VariableDefinition [name=val, type=LiteralType [name=CARD8]]
      NodeList
        ProcedureCall [procedureName=Clear, arguments=[ConstantLiteral [value=100], ConstantLiteral [value=70]]]
          NodeList
            ConstantLiteral [value=100]
            ConstantLiteral [value=70]
        Assignement [target=Identifier [name=water], value=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=stages], operator="<>", right=ConstantLiteral [value=0]]), operator="OR", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="<>", right=ConstantLiteral [value=0]])]]
          Identifier [name=water]
          InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=stages], operator="<>", right=ConstantLiteral [value=0]]), operator="OR", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="<>", right=ConstantLiteral [value=0]])]
            (InfixOpExpression [left=Identifier [name=stages], operator="<>", right=ConstantLiteral [value=0]])
              InfixOpExpression [left=Identifier [name=stages], operator="<>", right=ConstantLiteral [value=0]]
                Identifier [name=stages]
                ConstantLiteral [value=0]
            (InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="<>", right=ConstantLiteral [value=0]])
              InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="<>", right=ConstantLiteral [value=0]]
                InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]
                  FunctionCall [functionName=RND, arguments=[]]
                  ConstantLiteral [value=4]
                ConstantLiteral [value=0]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=99], ConstantLiteral [value=69], Identifier [name=SimpleBlock]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=99]
            ConstantLiteral [value=69]
            Identifier [name=SimpleBlock]
        IfStatement [condition=Identifier [name=dualpf], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=BackNone]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Tar]]]]
          Identifier [name=dualpf]
          NodeList
            Assignement [target=Identifier [name=val], value=Identifier [name=BackNone]]
              Identifier [name=val]
              Identifier [name=BackNone]
          NodeList
            Assignement [target=Identifier [name=val], value=Identifier [name=Tar]]
              Identifier [name=val]
              Identifier [name=Tar]
        ProcedureCall [procedureName=FillEllipse, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=98], ConstantLiteral [value=68], Identifier [name=val]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=98]
            ConstantLiteral [value=68]
            Identifier [name=val]
        ForLoop [identifier=Identifier [name=c], fromExpression=ConstantLiteral [value=1], toExpression=InfixOpExpression [left=ConstantLiteral [value=16], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=16]]], byExpression=null, statements=[Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=ConstantLiteral [value=2], operator="+", right=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=5]]]]], IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=98], ConstantLiteral [value=68], Identifier [name=sz], ConstantLiteral [value=0], Identifier [name=a], Identifier [name=x], Identifier [name=y], Identifier [name=FALSE]]], thenStatements=[ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]], Identifier [name=SimpleBlock]]]], elseifs=[], elseStatements=[]]]]
          ConstantLiteral [value=1]
          InfixOpExpression [left=ConstantLiteral [value=16], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=16]]]
            ConstantLiteral [value=16]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=16]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=16]
          NodeList
            Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=ConstantLiteral [value=2], operator="+", right=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=5]]]]]
              Identifier [name=sz]
              InfixOpExpression [left=ConstantLiteral [value=2], operator="+", right=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=5]]]]
                ConstantLiteral [value=2]
                FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=5]]]
            IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=98], ConstantLiteral [value=68], Identifier [name=sz], ConstantLiteral [value=0], Identifier [name=a], Identifier [name=x], Identifier [name=y], Identifier [name=FALSE]]], thenStatements=[ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]], Identifier [name=SimpleBlock]]]], elseifs=[], elseStatements=[]]
              FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=98], ConstantLiteral [value=68], Identifier [name=sz], ConstantLiteral [value=0], Identifier [name=a], Identifier [name=x], Identifier [name=y], Identifier [name=FALSE]]]
              NodeList
                ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]], Identifier [name=SimpleBlock]]]
                  NodeList
                    InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                      Identifier [name=x]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                      Identifier [name=y]
                      Identifier [name=sz]
                    InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]
                      InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]]
                        Identifier [name=sz]
                        ConstantLiteral [value=2]
                      ConstantLiteral [value=1]
                    InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]
                      InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]]
                        Identifier [name=sz]
                        ConstantLiteral [value=2]
                      ConstantLiteral [value=1]
                    Identifier [name=SimpleBlock]
        ForLoop [identifier=Identifier [name=c], fromExpression=ConstantLiteral [value=1], toExpression=ConstantLiteral [value=12], byExpression=null, statements=[Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=2]]], operator="+", right=ConstantLiteral [value=1]]], IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=98], ConstantLiteral [value=68], Identifier [name=sz], ConstantLiteral [value=15], Identifier [name=a], Identifier [name=x], Identifier [name=y], Identifier [name=TRUE]]], thenStatements=[ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]], Identifier [name=Ground]]], ProcedureCall [procedureName=PutBubbleMaker, arguments=[ConstantLiteral [value=0], Identifier [name=x], Identifier [name=y]]], ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN2], Identifier [name=cNest], ConstantLiteral [value=1], InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=1]], Identifier [name=y]]], ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN1], Identifier [name=aHospital], Identifier [name=pLife3], InfixOpExpression [left=Identifier [name=x], operator="+", right=ConstantLiteral [value=1]], Identifier [name=y]]], IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator=">=", right=InfixOpExpression [left=ConstantLiteral [value=10], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]]], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=FalseBlock]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Ground2]]]], IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=c], operator="=", right=ConstantLiteral [value=12]]), operator="AND", right=(InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=2]])], thenStatements=[ProcedureCall [procedureName=PutExtraPower, arguments=[ConstantLiteral [value=2], Identifier [name=x], InfixOpExpression [left=Identifier [name=y], operator="-", right=ConstantLiteral [value=1]]]], ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=BONUS], Identifier [name=BonusLevel], Identifier [name=tbBonusLevel], Identifier [name=x], InfixOpExpression [left=Identifier [name=y], operator="+", right=ConstantLiteral [value=1]]]]], elseifs=[], elseStatements=[]], ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=sz], Identifier [name=a], Identifier [name=val]]]], elseifs=[], elseStatements=[]]]]
          ConstantLiteral [value=1]
          ConstantLiteral [value=12]
          NodeList
            Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=2]]], operator="+", right=ConstantLiteral [value=1]]]
              Identifier [name=sz]
              InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=2]]], operator="+", right=ConstantLiteral [value=1]]
                FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=2]]]
                ConstantLiteral [value=1]
            IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=98], ConstantLiteral [value=68], Identifier [name=sz], ConstantLiteral [value=15], Identifier [name=a], Identifier [name=x], Identifier [name=y], Identifier [name=TRUE]]], thenStatements=[ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]], Identifier [name=Ground]]], ProcedureCall [procedureName=PutBubbleMaker, arguments=[ConstantLiteral [value=0], Identifier [name=x], Identifier [name=y]]], ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN2], Identifier [name=cNest], ConstantLiteral [value=1], InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=1]], Identifier [name=y]]], ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN1], Identifier [name=aHospital], Identifier [name=pLife3], InfixOpExpression [left=Identifier [name=x], operator="+", right=ConstantLiteral [value=1]], Identifier [name=y]]], IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator=">=", right=InfixOpExpression [left=ConstantLiteral [value=10], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]]], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=FalseBlock]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Ground2]]]], IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=c], operator="=", right=ConstantLiteral [value=12]]), operator="AND", right=(InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=2]])], thenStatements=[ProcedureCall [procedureName=PutExtraPower, arguments=[ConstantLiteral [value=2], Identifier [name=x], InfixOpExpression [left=Identifier [name=y], operator="-", right=ConstantLiteral [value=1]]]], ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=BONUS], Identifier [name=BonusLevel], Identifier [name=tbBonusLevel], Identifier [name=x], InfixOpExpression [left=Identifier [name=y], operator="+", right=ConstantLiteral [value=1]]]]], elseifs=[], elseStatements=[]], ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=sz], Identifier [name=a], Identifier [name=val]]]], elseifs=[], elseStatements=[]]
              FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=98], ConstantLiteral [value=68], Identifier [name=sz], ConstantLiteral [value=15], Identifier [name=a], Identifier [name=x], Identifier [name=y], Identifier [name=TRUE]]]
              NodeList
                ProcedureCall [procedureName=FillEllipse, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]], InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]], Identifier [name=Ground]]]
                  NodeList
                    InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                      Identifier [name=x]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                      Identifier [name=y]
                      Identifier [name=sz]
                    InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]
                      InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]]
                        Identifier [name=sz]
                        ConstantLiteral [value=2]
                      ConstantLiteral [value=1]
                    InfixOpExpression [left=InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]], operator="+", right=ConstantLiteral [value=1]]
                      InfixOpExpression [left=Identifier [name=sz], operator="*", right=ConstantLiteral [value=2]]
                        Identifier [name=sz]
                        ConstantLiteral [value=2]
                      ConstantLiteral [value=1]
                    Identifier [name=Ground]
                ProcedureCall [procedureName=PutBubbleMaker, arguments=[ConstantLiteral [value=0], Identifier [name=x], Identifier [name=y]]]
                  NodeList
                    ConstantLiteral [value=0]
                    Identifier [name=x]
                    Identifier [name=y]
                ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN2], Identifier [name=cNest], ConstantLiteral [value=1], InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=1]], Identifier [name=y]]]
                  NodeList
                    Identifier [name=ALIEN2]
                    Identifier [name=cNest]
                    ConstantLiteral [value=1]
                    InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=1]]
                      Identifier [name=x]
                      ConstantLiteral [value=1]
                    Identifier [name=y]
                ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN1], Identifier [name=aHospital], Identifier [name=pLife3], InfixOpExpression [left=Identifier [name=x], operator="+", right=ConstantLiteral [value=1]], Identifier [name=y]]]
                  NodeList
                    Identifier [name=ALIEN1]
                    Identifier [name=aHospital]
                    Identifier [name=pLife3]
                    InfixOpExpression [left=Identifier [name=x], operator="+", right=ConstantLiteral [value=1]]
                      Identifier [name=x]
                      ConstantLiteral [value=1]
                    Identifier [name=y]
                IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator=">=", right=InfixOpExpression [left=ConstantLiteral [value=10], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]]], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=FalseBlock]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Ground2]]]]
                  InfixOpExpression [left=Identifier [name=c], operator=">=", right=InfixOpExpression [left=ConstantLiteral [value=10], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]]]
                    Identifier [name=c]
                    InfixOpExpression [left=ConstantLiteral [value=10], operator="+", right=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]]
                      ConstantLiteral [value=10]
                      InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]
                        FunctionCall [functionName=RND, arguments=[]]
                        ConstantLiteral [value=3]
                  NodeList
                    Assignement [target=Identifier [name=val], value=Identifier [name=FalseBlock]]
                      Identifier [name=val]
                      Identifier [name=FalseBlock]
                  NodeList
                    Assignement [target=Identifier [name=val], value=Identifier [name=Ground2]]
                      Identifier [name=val]
                      Identifier [name=Ground2]
                IfStatement [condition=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=c], operator="=", right=ConstantLiteral [value=12]]), operator="AND", right=(InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=2]])], thenStatements=[ProcedureCall [procedureName=PutExtraPower, arguments=[ConstantLiteral [value=2], Identifier [name=x], InfixOpExpression [left=Identifier [name=y], operator="-", right=ConstantLiteral [value=1]]]], ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=BONUS], Identifier [name=BonusLevel], Identifier [name=tbBonusLevel], Identifier [name=x], InfixOpExpression [left=Identifier [name=y], operator="+", right=ConstantLiteral [value=1]]]]], elseifs=[], elseStatements=[]]
                  InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=c], operator="=", right=ConstantLiteral [value=12]]), operator="AND", right=(InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=2]])]
                    (InfixOpExpression [left=Identifier [name=c], operator="=", right=ConstantLiteral [value=12]])
                      InfixOpExpression [left=Identifier [name=c], operator="=", right=ConstantLiteral [value=12]]
                        Identifier [name=c]
                        ConstantLiteral [value=12]
                    (InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=2]])
                      InfixOpExpression [left=Identifier [name=powerCountDown], operator=">", right=ConstantLiteral [value=2]]
                        Identifier [name=powerCountDown]
                        ConstantLiteral [value=2]
                  NodeList
                    ProcedureCall [procedureName=PutExtraPower, arguments=[ConstantLiteral [value=2], Identifier [name=x], InfixOpExpression [left=Identifier [name=y], operator="-", right=ConstantLiteral [value=1]]]]
                      NodeList
                        ConstantLiteral [value=2]
                        Identifier [name=x]
                        InfixOpExpression [left=Identifier [name=y], operator="-", right=ConstantLiteral [value=1]]
                          Identifier [name=y]
                          ConstantLiteral [value=1]
                    ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=BONUS], Identifier [name=BonusLevel], Identifier [name=tbBonusLevel], Identifier [name=x], InfixOpExpression [left=Identifier [name=y], operator="+", right=ConstantLiteral [value=1]]]]
                      NodeList
                        Identifier [name=BONUS]
                        Identifier [name=BonusLevel]
                        Identifier [name=tbBonusLevel]
                        Identifier [name=x]
                        InfixOpExpression [left=Identifier [name=y], operator="+", right=ConstantLiteral [value=1]]
                          Identifier [name=y]
                          ConstantLiteral [value=1]
                ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=sz], Identifier [name=a], Identifier [name=val]]]
                  NodeList
                    Identifier [name=x]
                    Identifier [name=y]
                    Identifier [name=sz]
                    Identifier [name=a]
                    Identifier [name=val]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=99], ConstantLiteral [value=69], Identifier [name=OnlyWall], Identifier [name=Leaf1], InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=128]]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=99]
            ConstantLiteral [value=69]
            Identifier [name=OnlyWall]
            Identifier [name=Leaf1]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=128]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=128]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=99], ConstantLiteral [value=69], Identifier [name=OnlyWall], Identifier [name=Leaf2], InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=128]]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=99]
            ConstantLiteral [value=69]
            Identifier [name=OnlyWall]
            Identifier [name=Leaf2]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=128]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=128]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=99], ConstantLiteral [value=69], Identifier [name=OnlyWall], Identifier [name=Leaf3], InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=256]]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=99]
            ConstantLiteral [value=69]
            Identifier [name=OnlyWall]
            Identifier [name=Leaf3]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=256]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=256]
        ProcedureCall [procedureName=PutRandom, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=99], ConstantLiteral [value=69], Identifier [name=OnlyWall], Identifier [name=Leaf4], InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=256]]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=99]
            ConstantLiteral [value=69]
            Identifier [name=OnlyWall]
            Identifier [name=Leaf4]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=256]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=256]
        ProcedureCall [procedureName=PutPlayer, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=34]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=34]
        ProcedureCall [procedureName=PutExit, arguments=[ConstantLiteral [value=98], ConstantLiteral [value=34]]]
          NodeList
            ConstantLiteral [value=98]
            ConstantLiteral [value=34]
        ProcedureCall [procedureName=PutBubbleMaker, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=49], ConstantLiteral [value=1]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=49]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutBubbleMaker, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=50], ConstantLiteral [value=68]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=50]
            ConstantLiteral [value=68]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=50], ConstantLiteral [value=1], ConstantLiteral [value=99], ConstantLiteral [value=69]]]
          NodeList
            ConstantLiteral [value=50]
            ConstantLiteral [value=1]
            ConstantLiteral [value=99]
            ConstantLiteral [value=69]
        ProcedureCall [procedureName=PutCreatorR, arguments=[ConstantLiteral [value=20]]]
          NodeList
            ConstantLiteral [value=20]
        ProcedureCall [procedureName=PutCreatorC, arguments=[ConstantLiteral [value=20]]]
          NodeList
            ConstantLiteral [value=20]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=49], ConstantLiteral [value=69]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=49]
            ConstantLiteral [value=69]
        ProcedureCall [procedureName=PutFour, arguments=[Identifier [name=pLife4], ConstantLiteral [value=20]]]
          NodeList
            Identifier [name=pLife4]
            ConstantLiteral [value=20]
        ProcedureCall [procedureName=PutTri, arguments=[Identifier [name=pLife4], ConstantLiteral [value=7]]]
          NodeList
            Identifier [name=pLife4]
            ConstantLiteral [value=7]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=20], ConstantLiteral [value=69]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=20]
            ConstantLiteral [value=69]
        ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbDBSpeed], ConstantLiteral [value=2]]]
          NodeList
            Identifier [name=tbDBSpeed]
            ConstantLiteral [value=2]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=99], ConstantLiteral [value=69]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=99]
            ConstantLiteral [value=69]
        ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=aBubble], Identifier [name=pLife3], ConstantLiteral [value=20]]]
          NodeList
            Identifier [name=aBubble]
            Identifier [name=pLife3]
            ConstantLiteral [value=20]
        ProcedureCall [procedureName=PutMagnet, arguments=[ConstantLiteral [value=4]]]
          NodeList
            ConstantLiteral [value=4]
        IfStatement [condition=InfixOpExpression [left=Identifier [name=nbDollar], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=PutMoney, arguments=[SetExpression [setType=LiteralType [name=MoneySet], setValues=[Identifier [name=m3]]], InfixOpExpression [left=ConstantLiteral [value=10], operator="+", right=Identifier [name=difficulty]]]]], elseifs=[], elseStatements=[]]
          InfixOpExpression [left=Identifier [name=nbDollar], operator="=", right=ConstantLiteral [value=0]]
            Identifier [name=nbDollar]
            ConstantLiteral [value=0]
          NodeList
            ProcedureCall [procedureName=PutMoney, arguments=[SetExpression [setType=LiteralType [name=MoneySet], setValues=[Identifier [name=m3]]], InfixOpExpression [left=ConstantLiteral [value=10], operator="+", right=Identifier [name=difficulty]]]]
              NodeList
                SetExpression [setType=LiteralType [name=MoneySet], setValues=[Identifier [name=m3]]]
                  NodeList
                    Identifier [name=m3]
                InfixOpExpression [left=ConstantLiteral [value=10], operator="+", right=Identifier [name=difficulty]]
                  ConstantLiteral [value=10]
                  Identifier [name=difficulty]
        IfStatement [condition=InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]], thenStatements=[ProcedureCall [procedureName=PutAlien2, arguments=[Identifier [name=cCircle], ConstantLiteral [value=120], ConstantLiteral [value=5]]], ProcedureCall [procedureName=PutTurret, arguments=[ConstantLiteral [value=5]]], ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=49], ConstantLiteral [value=69]]], ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbNoMissile], ConstantLiteral [value=2]]]], elseifs=[], elseStatements=[]]
          InfixOpExpression [left=Identifier [name=stages], operator="=", right=ConstantLiteral [value=0]]
            Identifier [name=stages]
            ConstantLiteral [value=0]
          NodeList
            ProcedureCall [procedureName=PutAlien2, arguments=[Identifier [name=cCircle], ConstantLiteral [value=120], ConstantLiteral [value=5]]]
              NodeList
                Identifier [name=cCircle]
                ConstantLiteral [value=120]
                ConstantLiteral [value=5]
            ProcedureCall [procedureName=PutTurret, arguments=[ConstantLiteral [value=5]]]
              NodeList
                ConstantLiteral [value=5]
            ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=49], ConstantLiteral [value=69]]]
              NodeList
                ConstantLiteral [value=1]
                ConstantLiteral [value=1]
                ConstantLiteral [value=49]
                ConstantLiteral [value=69]
            ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbNoMissile], ConstantLiteral [value=2]]]
              NodeList
                Identifier [name=tbNoMissile]
                ConstantLiteral [value=2]
        ProcedureCall [procedureName=PutChaosObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=doSand], ConstantLiteral [value=0], ConstantLiteral [value=2880], ConstantLiteral [value=1280], ConstantLiteral [value=3168], ConstantLiteral [value=1920], ConstantLiteral [value=15]]]
          NodeList
            Identifier [name=DEADOBJ]
            Identifier [name=doSand]
            ConstantLiteral [value=0]
            ConstantLiteral [value=2880]
            ConstantLiteral [value=1280]
            ConstantLiteral [value=3168]
            ConstantLiteral [value=1920]
            ConstantLiteral [value=15]
        ProcedureCall [procedureName=AddOptions, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=98], ConstantLiteral [value=68], ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=0], ConstantLiteral [value=6], ConstantLiteral [value=20], ConstantLiteral [value=3], ConstantLiteral [value=3]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=98]
            ConstantLiteral [value=68]
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=0]
            ConstantLiteral [value=6]
            ConstantLiteral [value=20]
            ConstantLiteral [value=3]
            ConstantLiteral [value=3]
    ProcedureImplementation [name=Assembly, arguments=[], returnType=null]
      NodeList
        VariableDefinition [name=x, type=LiteralType [name=INT16]]
        VariableDefinition [name=val, type=LiteralType [name=CARD8]]
      NodeList
        ProcedureCall [procedureName=Cadre, arguments=[ConstantLiteral [value=15], ConstantLiteral [value=70]]]
          NodeList
            ConstantLiteral [value=15]
            ConstantLiteral [value=70]
        IfStatement [condition=Identifier [name=dualpf], thenStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=BackNone]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=val], value=Identifier [name=Round4]]]]
          Identifier [name=dualpf]
          NodeList
            Assignement [target=Identifier [name=val], value=Identifier [name=BackNone]]
              Identifier [name=val]
              Identifier [name=BackNone]
          NodeList
            Assignement [target=Identifier [name=val], value=Identifier [name=Round4]]
              Identifier [name=val]
              Identifier [name=Round4]
        ProcedureCall [procedureName=FillCond, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=14], ConstantLiteral [value=69], Identifier [name=OnlyWall], Identifier [name=SimpleBlock]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=14]
            ConstantLiteral [value=69]
            Identifier [name=OnlyWall]
            Identifier [name=SimpleBlock]
        ProcedureCall [procedureName=GCastle, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=7], ConstantLiteral [value=13], ConstantLiteral [value=25], Identifier [name=Bricks], Identifier [name=val]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=7]
            ConstantLiteral [value=13]
            ConstantLiteral [value=25]
            Identifier [name=Bricks]
            Identifier [name=val]
        ProcedureCall [procedureName=DrawPacman, arguments=[ConstantLiteral [value=6], ConstantLiteral [value=2], ConstantLiteral [value=2], ConstantLiteral [value=2], ConstantLiteral [value=27], ConstantLiteral [value=12], ConstantLiteral [value=39]]]
          NodeList
            ConstantLiteral [value=6]
            ConstantLiteral [value=2]
            ConstantLiteral [value=2]
            ConstantLiteral [value=2]
            ConstantLiteral [value=27]
            ConstantLiteral [value=12]
            ConstantLiteral [value=39]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=41], ConstantLiteral [value=12], ConstantLiteral [value=41], Identifier [name=SimpleBlock]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=41]
            ConstantLiteral [value=12]
            ConstantLiteral [value=41]
            Identifier [name=SimpleBlock]
        ProcedureCall [procedureName=FillRandom, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=27], ConstantLiteral [value=13], ConstantLiteral [value=40], Identifier [name=Granit1], Identifier [name=Granit2], Identifier [name=OnlyWall], Identifier [name=Rnd]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=27]
            ConstantLiteral [value=13]
            ConstantLiteral [value=40]
            Identifier [name=Granit1]
            Identifier [name=Granit2]
            Identifier [name=OnlyWall]
            Identifier [name=Rnd]
        ProcedureCall [procedureName=FillCond, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=13], ConstantLiteral [value=69], Identifier [name=OnlyBackground], Identifier [name=val]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=13]
            ConstantLiteral [value=69]
            Identifier [name=OnlyBackground]
            Identifier [name=val]
        Assignement [target=Identifier [name=x], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=10]]], operator="+", right=ConstantLiteral [value=3]]]
          Identifier [name=x]
          InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=10]]], operator="+", right=ConstantLiteral [value=3]]
            FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=10]]]
            ConstantLiteral [value=3]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=47], InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=1]], ConstantLiteral [value=55], Identifier [name=SimpleBlock]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=47]
            InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=1]]
              Identifier [name=x]
              ConstantLiteral [value=1]
            ConstantLiteral [value=55]
            Identifier [name=SimpleBlock]
        ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="+", right=ConstantLiteral [value=1]], ConstantLiteral [value=47], ConstantLiteral [value=14], ConstantLiteral [value=55], Identifier [name=SimpleBlock]]]
          NodeList
            InfixOpExpression [left=Identifier [name=x], operator="+", right=ConstantLiteral [value=1]]
              Identifier [name=x]
              ConstantLiteral [value=1]
            ConstantLiteral [value=47]
            ConstantLiteral [value=14]
            ConstantLiteral [value=55]
            Identifier [name=SimpleBlock]
        ProcedureCall [procedureName=PutPlayer, arguments=[ConstantLiteral [value=8], ConstantLiteral [value=3]]]
          NodeList
            ConstantLiteral [value=8]
            ConstantLiteral [value=3]
        ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN1], Identifier [name=aKamikaze], ConstantLiteral [value=0], ConstantLiteral [value=6], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=ALIEN1]
            Identifier [name=aKamikaze]
            ConstantLiteral [value=0]
            ConstantLiteral [value=6]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN1], Identifier [name=aKamikaze], ConstantLiteral [value=1], ConstantLiteral [value=10], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=ALIEN1]
            Identifier [name=aKamikaze]
            ConstantLiteral [value=1]
            ConstantLiteral [value=10]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN1], Identifier [name=aKamikaze], ConstantLiteral [value=2], ConstantLiteral [value=6], ConstantLiteral [value=5]]]
          NodeList
            Identifier [name=ALIEN1]
            Identifier [name=aKamikaze]
            ConstantLiteral [value=2]
            ConstantLiteral [value=6]
            ConstantLiteral [value=5]
        ProcedureCall [procedureName=PutBlockObj, arguments=[Identifier [name=ALIEN1], Identifier [name=aKamikaze], ConstantLiteral [value=3], ConstantLiteral [value=10], ConstantLiteral [value=5]]]
          NodeList
            Identifier [name=ALIEN1]
            Identifier [name=aKamikaze]
            ConstantLiteral [value=3]
            ConstantLiteral [value=10]
            ConstantLiteral [value=5]
        ProcedureCall [procedureName=PutExit, arguments=[ConstantLiteral [value=13], ConstantLiteral [value=68]]]
          NodeList
            ConstantLiteral [value=13]
            ConstantLiteral [value=68]
        ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbDBSpeed], ConstantLiteral [value=13], ConstantLiteral [value=40]]]
          NodeList
            Identifier [name=tbDBSpeed]
            ConstantLiteral [value=13]
            ConstantLiteral [value=40]
        ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbSGSpeed], Identifier [name=x], ConstantLiteral [value=56]]]
          NodeList
            Identifier [name=tbSGSpeed]
            Identifier [name=x]
            ConstantLiteral [value=56]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=48], ConstantLiteral [value=13], ConstantLiteral [value=48], Identifier [name=FalseBlock]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=48]
            ConstantLiteral [value=13]
            ConstantLiteral [value=48]
            Identifier [name=FalseBlock]
        ProcedureCall [procedureName=Put, arguments=[Identifier [name=x], ConstantLiteral [value=48], Identifier [name=Round4]]]
          NodeList
            Identifier [name=x]
            ConstantLiteral [value=48]
            Identifier [name=Round4]
        Assignement [target=Identifier [name=val], value=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="+", right=Identifier [name=tbMagnet]]]
          Identifier [name=val]
          InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]], operator="+", right=Identifier [name=tbMagnet]]
            InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=3]]
              FunctionCall [functionName=RND, arguments=[]]
              ConstantLiteral [value=3]
            Identifier [name=tbMagnet]
        ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=val], ConstantLiteral [value=1], ConstantLiteral [value=48]]]
          NodeList
            Identifier [name=val]
            ConstantLiteral [value=1]
            ConstantLiteral [value=48]
        ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=val], ConstantLiteral [value=13], ConstantLiteral [value=48]]]
          NodeList
            Identifier [name=val]
            ConstantLiteral [value=13]
            ConstantLiteral [value=48]
        ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbHospital], Identifier [name=x], ConstantLiteral [value=52]]]
          NodeList
            Identifier [name=tbHospital]
            Identifier [name=x]
            ConstantLiteral [value=52]
        ProcedureCall [procedureName=PutFineObj, arguments=[Identifier [name=ALIEN1], Identifier [name=aKamikaze], ConstantLiteral [value=0], ConstantLiteral [value=6], ConstantLiteral [value=44], ConstantLiteral [value=0], ConstantLiteral [value=0]]]
          NodeList
            Identifier [name=ALIEN1]
            Identifier [name=aKamikaze]
            ConstantLiteral [value=0]
            ConstantLiteral [value=6]
            ConstantLiteral [value=44]
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
        ProcedureCall [procedureName=PutFineObj, arguments=[Identifier [name=ALIEN1], Identifier [name=aKamikaze], ConstantLiteral [value=1], ConstantLiteral [value=6], ConstantLiteral [value=44], ConstantLiteral [value=1], ConstantLiteral [value=0]]]
          NodeList
            Identifier [name=ALIEN1]
            Identifier [name=aKamikaze]
            ConstantLiteral [value=1]
            ConstantLiteral [value=6]
            ConstantLiteral [value=44]
            ConstantLiteral [value=1]
            ConstantLiteral [value=0]
        ProcedureCall [procedureName=PutFineObj, arguments=[Identifier [name=ALIEN1], Identifier [name=aKamikaze], ConstantLiteral [value=2], ConstantLiteral [value=6], ConstantLiteral [value=44], ConstantLiteral [value=0], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=ALIEN1]
            Identifier [name=aKamikaze]
            ConstantLiteral [value=2]
            ConstantLiteral [value=6]
            ConstantLiteral [value=44]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutFineObj, arguments=[Identifier [name=ALIEN1], Identifier [name=aKamikaze], ConstantLiteral [value=3], ConstantLiteral [value=6], ConstantLiteral [value=44], ConstantLiteral [value=1], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=ALIEN1]
            Identifier [name=aKamikaze]
            ConstantLiteral [value=3]
            ConstantLiteral [value=6]
            ConstantLiteral [value=44]
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=41], ConstantLiteral [value=13], ConstantLiteral [value=46]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=41]
            ConstantLiteral [value=13]
            ConstantLiteral [value=46]
        ProcedureCall [procedureName=PutBullet, arguments=[ConstantLiteral [value=17]]]
          NodeList
            ConstantLiteral [value=17]
        ProcedureCall [procedureName=PutChaosObjs, arguments=[Identifier [name=ALIEN2], Identifier [name=cNest], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]], ConstantLiteral [value=15]]]
          NodeList
            Identifier [name=ALIEN2]
            Identifier [name=cNest]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]]
              Identifier [name=BW]
              ConstantLiteral [value=2]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]]
              Identifier [name=BH]
              ConstantLiteral [value=57]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]]
              Identifier [name=BW]
              ConstantLiteral [value=13]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]]
              Identifier [name=BH]
              ConstantLiteral [value=68]
            ConstantLiteral [value=15]
        ProcedureCall [procedureName=PutChaosObjs, arguments=[Identifier [name=ALIEN2], Identifier [name=cCreatorR], ConstantLiteral [value=80], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]], ConstantLiteral [value=15]]]
          NodeList
            Identifier [name=ALIEN2]
            Identifier [name=cCreatorR]
            ConstantLiteral [value=80]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]]
              Identifier [name=BW]
              ConstantLiteral [value=2]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]]
              Identifier [name=BH]
              ConstantLiteral [value=57]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]]
              Identifier [name=BW]
              ConstantLiteral [value=13]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]]
              Identifier [name=BH]
              ConstantLiteral [value=68]
            ConstantLiteral [value=15]
        ProcedureCall [procedureName=PutChaosObjs, arguments=[Identifier [name=ALIEN2], Identifier [name=cCreatorC], ConstantLiteral [value=80], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]], ConstantLiteral [value=15]]]
          NodeList
            Identifier [name=ALIEN2]
            Identifier [name=cCreatorC]
            ConstantLiteral [value=80]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]]
              Identifier [name=BW]
              ConstantLiteral [value=2]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]]
              Identifier [name=BH]
              ConstantLiteral [value=57]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]]
              Identifier [name=BW]
              ConstantLiteral [value=13]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]]
              Identifier [name=BH]
              ConstantLiteral [value=68]
            ConstantLiteral [value=15]
        ProcedureCall [procedureName=PutChaosObjs, arguments=[Identifier [name=ALIEN2], Identifier [name=cFour], Identifier [name=pLife4], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]], ConstantLiteral [value=12]]]
          NodeList
            Identifier [name=ALIEN2]
            Identifier [name=cFour]
            Identifier [name=pLife4]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]]
              Identifier [name=BW]
              ConstantLiteral [value=2]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]]
              Identifier [name=BH]
              ConstantLiteral [value=57]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]]
              Identifier [name=BW]
              ConstantLiteral [value=13]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]]
              Identifier [name=BH]
              ConstantLiteral [value=68]
            ConstantLiteral [value=12]
        ProcedureCall [procedureName=PutChaosObjs, arguments=[Identifier [name=ALIEN2], Identifier [name=cQuad], Identifier [name=pLife4], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]], ConstantLiteral [value=10]]]
          NodeList
            Identifier [name=ALIEN2]
            Identifier [name=cQuad]
            Identifier [name=pLife4]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]]
              Identifier [name=BW]
              ConstantLiteral [value=2]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]]
              Identifier [name=BH]
              ConstantLiteral [value=57]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]]
              Identifier [name=BW]
              ConstantLiteral [value=13]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]]
              Identifier [name=BH]
              ConstantLiteral [value=68]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=PutChaosObjs, arguments=[Identifier [name=MACHINE], Identifier [name=mTurret], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]], ConstantLiteral [value=12]]]
          NodeList
            Identifier [name=MACHINE]
            Identifier [name=mTurret]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]]
              Identifier [name=BW]
              ConstantLiteral [value=2]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]]
              Identifier [name=BH]
              ConstantLiteral [value=57]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]]
              Identifier [name=BW]
              ConstantLiteral [value=13]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]]
              Identifier [name=BH]
              ConstantLiteral [value=68]
            ConstantLiteral [value=12]
        ProcedureCall [procedureName=PutChaosObjs, arguments=[Identifier [name=MACHINE], Identifier [name=mCannon3], ConstantLiteral [value=0], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]], InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]], InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]], ConstantLiteral [value=8]]]
          NodeList
            Identifier [name=MACHINE]
            Identifier [name=mCannon3]
            ConstantLiteral [value=0]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=2]]
              Identifier [name=BW]
              ConstantLiteral [value=2]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=57]]
              Identifier [name=BH]
              ConstantLiteral [value=57]
            InfixOpExpression [left=Identifier [name=BW], operator="*", right=ConstantLiteral [value=13]]
              Identifier [name=BW]
              ConstantLiteral [value=13]
            InfixOpExpression [left=Identifier [name=BH], operator="*", right=ConstantLiteral [value=68]]
              Identifier [name=BH]
              ConstantLiteral [value=68]
            ConstantLiteral [value=8]
        ProcedureCall [procedureName=AddOptions, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=10], ConstantLiteral [value=13], ConstantLiteral [value=68], ConstantLiteral [value=4], ConstantLiteral [value=4], ConstantLiteral [value=4], ConstantLiteral [value=4], ConstantLiteral [value=4], ConstantLiteral [value=4], ConstantLiteral [value=4]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=10]
            ConstantLiteral [value=13]
            ConstantLiteral [value=68]
            ConstantLiteral [value=4]
            ConstantLiteral [value=4]
            ConstantLiteral [value=4]
            ConstantLiteral [value=4]
            ConstantLiteral [value=4]
            ConstantLiteral [value=4]
            ConstantLiteral [value=4]
    ProcedureImplementation [name=RndRect, arguments=[FormalArgument [var=false, name=Alien1L, type=RangeSetType [lowerBound=ConstantLiteral [value=0], upperBound=ConstantLiteral [value=15]]], FormalArgument [var=false, name=Alien1S, type=RangeSetType [lowerBound=ConstantLiteral [value=0], upperBound=ConstantLiteral [value=15]]], FormalArgument [var=false, name=Alien2L, type=RangeSetType [lowerBound=ConstantLiteral [value=0], upperBound=ConstantLiteral [value=15]]], FormalArgument [var=false, name=Alien2B, type=RangeSetType [lowerBound=ConstantLiteral [value=0], upperBound=ConstantLiteral [value=15]]], FormalArgument [var=false, name=Alien2S, type=RangeSetType [lowerBound=ConstantLiteral [value=0], upperBound=ConstantLiteral [value=15]]], FormalArgument [var=false, name=DObjs, type=RangeSetType [lowerBound=ConstantLiteral [value=0], upperBound=ConstantLiteral [value=15]]], FormalArgument [var=false, name=Machines, type=RangeSetType [lowerBound=ConstantLiteral [value=0], upperBound=ConstantLiteral [value=15]]], FormalArgument [var=false, name=TBonus, type=RangeSetType [lowerBound=ConstantLiteral [value=0], upperBound=ConstantLiteral [value=15]]], FormalArgument [var=true, name=x, type=LiteralType [name=INT16]], FormalArgument [var=true, name=y, type=LiteralType [name=INT16]], FormalArgument [var=true, name=sz, type=LiteralType [name=INT16]], FormalArgument [var=true, name=angle, type=LiteralType [name=INT16]], FormalArgument [var=true, name=c, type=LiteralType [name=CARD16]], FormalArgument [var=true, name=lf, type=LiteralType [name=CARD16]]], returnType=null]
      NodeList
        Assignement [target=Identifier [name=x], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=40]]], operator="+", right=ConstantLiteral [value=10]]]
          Identifier [name=x]
          InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=40]]], operator="+", right=ConstantLiteral [value=10]]
            FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=40]]]
            ConstantLiteral [value=10]
        Assignement [target=Identifier [name=y], value=InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=40]]], operator="+", right=ConstantLiteral [value=10]]]
          Identifier [name=y]
          InfixOpExpression [left=FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=40]]], operator="+", right=ConstantLiteral [value=10]]
            FunctionCall [functionName=Rnd, arguments=[ConstantLiteral [value=40]]]
            ConstantLiteral [value=10]
        ProcedureCall [procedureName=Rect, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=9]], InfixOpExpression [left=Identifier [name=y], operator="-", right=ConstantLiteral [value=9]], InfixOpExpression [left=Identifier [name=x], operator="+", right=ConstantLiteral [value=9]], InfixOpExpression [left=Identifier [name=y], operator="+", right=ConstantLiteral [value=9]]]]
          NodeList
            InfixOpExpression [left=Identifier [name=x], operator="-", right=ConstantLiteral [value=9]]
              Identifier [name=x]
              ConstantLiteral [value=9]
            InfixOpExpression [left=Identifier [name=y], operator="-", right=ConstantLiteral [value=9]]
              Identifier [name=y]
              ConstantLiteral [value=9]
            InfixOpExpression [left=Identifier [name=x], operator="+", right=ConstantLiteral [value=9]]
              Identifier [name=x]
              ConstantLiteral [value=9]
            InfixOpExpression [left=Identifier [name=y], operator="+", right=ConstantLiteral [value=9]]
              Identifier [name=y]
              ConstantLiteral [value=9]
    ProcedureImplementation [name=Jungle, arguments=[], returnType=null]
      NodeList
        ConstantDefinition [name=Alien1L, value=SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=aDbOval], Identifier [name=aHospital], Identifier [name=aDiese], Identifier [name=aStar], Identifier [name=aBubble], Identifier [name=aTri], Identifier [name=aTrefle]]]]
          SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=aDbOval], Identifier [name=aHospital], Identifier [name=aDiese], Identifier [name=aStar], Identifier [name=aBubble], Identifier [name=aTri], Identifier [name=aTrefle]]]
            NodeList
              Identifier [name=aDbOval]
              Identifier [name=aHospital]
              Identifier [name=aDiese]
              Identifier [name=aStar]
              Identifier [name=aBubble]
              Identifier [name=aTri]
              Identifier [name=aTrefle]
        ConstantDefinition [name=Alien1S, value=SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=aCartoon], Identifier [name=aKamikaze], Identifier [name=aPic]]]]
          SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=aCartoon], Identifier [name=aKamikaze], Identifier [name=aPic]]]
            NodeList
              Identifier [name=aCartoon]
              Identifier [name=aKamikaze]
              Identifier [name=aPic]
        ConstantDefinition [name=Alien2L, value=SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=cAlienV], Identifier [name=cAlienA], Identifier [name=cCreatorR], Identifier [name=cCreatorC], Identifier [name=cFour], Identifier [name=cQuad]]]]
          SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=cAlienV], Identifier [name=cAlienA], Identifier [name=cCreatorR], Identifier [name=cCreatorC], Identifier [name=cFour], Identifier [name=cQuad]]]
            NodeList
              Identifier [name=cAlienV]
              Identifier [name=cAlienA]
              Identifier [name=cCreatorR]
              Identifier [name=cCreatorC]
              Identifier [name=cFour]
              Identifier [name=cQuad]
        ConstantDefinition [name=Alien2B, value=SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=cCreatorR], Identifier [name=cCreatorC]]]]
          SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=cCreatorR], Identifier [name=cCreatorC]]]
            NodeList
              Identifier [name=cCreatorR]
              Identifier [name=cCreatorC]
        ConstantDefinition [name=Alien2S, value=SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=cAlienBox], Identifier [name=cNest]]]]
          SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=cAlienBox], Identifier [name=cNest]]]
            NodeList
              Identifier [name=cAlienBox]
              Identifier [name=cNest]
        ConstantDefinition [name=DObjs, value=SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=doMagnetA], Identifier [name=doMagnetR], Identifier [name=doSand], Identifier [name=doMirror], Identifier [name=doWindMaker], Identifier [name=doBubbleMaker], Identifier [name=doFireMaker], Identifier [name=doFireWall]]]]
          SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=doMagnetA], Identifier [name=doMagnetR], Identifier [name=doSand], Identifier [name=doMirror], Identifier [name=doWindMaker], Identifier [name=doBubbleMaker], Identifier [name=doFireMaker], Identifier [name=doFireWall]]]
            NodeList
              Identifier [name=doMagnetA]
              Identifier [name=doMagnetR]
              Identifier [name=doSand]
              Identifier [name=doMirror]
              Identifier [name=doWindMaker]
              Identifier [name=doBubbleMaker]
              Identifier [name=doFireMaker]
              Identifier [name=doFireWall]
        ConstantDefinition [name=Machines, value=SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=mTraverse], Identifier [name=mCannon1], Identifier [name=mCannon2], Identifier [name=mCannon3], Identifier [name=mTurret]]]]
          SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=mTraverse], Identifier [name=mCannon1], Identifier [name=mCannon2], Identifier [name=mCannon3], Identifier [name=mTurret]]]
            NodeList
              Identifier [name=mTraverse]
              Identifier [name=mCannon1]
              Identifier [name=mCannon2]
              Identifier [name=mCannon3]
              Identifier [name=mTurret]
        ConstantDefinition [name=TBonus, value=SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=tbDBSpeed], Identifier [name=tbSGSpeed], Identifier [name=tbMagnet], Identifier [name=tbInvinsibility], Identifier [name=tbSleeper], Identifier [name=tbFreeFire], Identifier [name=tbMaxPower]]]]
          SetExpression [setType=LiteralType [name=SET16], setValues=[Identifier [name=tbDBSpeed], Identifier [name=tbSGSpeed], Identifier [name=tbMagnet], Identifier [name=tbInvinsibility], Identifier [name=tbSleeper], Identifier [name=tbFreeFire], Identifier [name=tbMaxPower]]]
            NodeList
              Identifier [name=tbDBSpeed]
              Identifier [name=tbSGSpeed]
              Identifier [name=tbMagnet]
              Identifier [name=tbInvinsibility]
              Identifier [name=tbSleeper]
              Identifier [name=tbFreeFire]
              Identifier [name=tbMaxPower]
      NodeList
        VariableDefinition [name=x, type=LiteralType [name=INT16]]
        VariableDefinition [name=y, type=LiteralType [name=INT16]]
        VariableDefinition [name=sz, type=LiteralType [name=INT16]]
        VariableDefinition [name=angle, type=LiteralType [name=INT16]]
        VariableDefinition [name=c, type=LiteralType [name=CARD16]]
        VariableDefinition [name=lf, type=LiteralType [name=CARD16]]
      NodeList
        ProcedureCall [procedureName=Clear, arguments=[ConstantLiteral [value=60], ConstantLiteral [value=60]]]
          NodeList
            ConstantLiteral [value=60]
            ConstantLiteral [value=60]
        ProcedureCall [procedureName=PutPlayer, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
        ProcedureCall [procedureName=PutBlockBonus, arguments=[Identifier [name=tbBomb], ConstantLiteral [value=59], ConstantLiteral [value=59]]]
          NodeList
            Identifier [name=tbBomb]
            ConstantLiteral [value=59]
            ConstantLiteral [value=59]
        Assignement [target=Identifier [name=water], value=InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=7]]), operator="AND", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="=", right=ConstantLiteral [value=0]])]]
          Identifier [name=water]
          InfixOpExpression [left=(InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=7]]), operator="AND", right=(InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="=", right=ConstantLiteral [value=0]])]
            (InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=7]])
              InfixOpExpression [left=Identifier [name=difficulty], operator=">=", right=ConstantLiteral [value=7]]
                Identifier [name=difficulty]
                ConstantLiteral [value=7]
            (InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="=", right=ConstantLiteral [value=0]])
              InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="=", right=ConstantLiteral [value=0]]
                InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]
                  FunctionCall [functionName=RND, arguments=[]]
                  ConstantLiteral [value=4]
                ConstantLiteral [value=0]
        ProcedureCall [procedureName=Fill, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=SimpleBlock]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=59]
            ConstantLiteral [value=59]
            Identifier [name=SimpleBlock]
        ProcedureCall [procedureName=Join, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58], ConstantLiteral [value=1], ConstantLiteral [value=1], Identifier [name=Ground2]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            Identifier [name=Ground2]
        ProcedureCall [procedureName=PutExit, arguments=[ConstantLiteral [value=58], ConstantLiteral [value=58]]]
          NodeList
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
        ForLoop [identifier=Identifier [name=c], fromExpression=ConstantLiteral [value=1], toExpression=ConstantLiteral [value=30], byExpression=null, statements=[Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="+", right=ConstantLiteral [value=2]]], IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=sz], ConstantLiteral [value=15], Identifier [name=angle], Identifier [name=x], Identifier [name=y], Identifier [name=TRUE]]], thenStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=Ground]]], ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=sz], Identifier [name=angle], Identifier [name=Ground2]]], ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]], IfStatement [condition=Identifier [name=dualpf], thenStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=BackNone]]]], elseifs=[], elseStatements=[]]], elseifs=[], elseStatements=[]]]]
          ConstantLiteral [value=1]
          ConstantLiteral [value=30]
          NodeList
            Assignement [target=Identifier [name=sz], value=InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="+", right=ConstantLiteral [value=2]]]
              Identifier [name=sz]
              InfixOpExpression [left=InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]], operator="+", right=ConstantLiteral [value=2]]
                InfixOpExpression [left=FunctionCall [functionName=RND, arguments=[]], operator="MOD", right=ConstantLiteral [value=4]]
                  FunctionCall [functionName=RND, arguments=[]]
                  ConstantLiteral [value=4]
                ConstantLiteral [value=2]
            IfStatement [condition=FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=sz], ConstantLiteral [value=15], Identifier [name=angle], Identifier [name=x], Identifier [name=y], Identifier [name=TRUE]]], thenStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=Ground]]], ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=sz], Identifier [name=angle], Identifier [name=Ground2]]], ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]], IfStatement [condition=Identifier [name=dualpf], thenStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=BackNone]]]], elseifs=[], elseStatements=[]]], elseifs=[], elseStatements=[]]
              FunctionCall [functionName=FindIsolatedRect, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=sz], ConstantLiteral [value=15], Identifier [name=angle], Identifier [name=x], Identifier [name=y], Identifier [name=TRUE]]]
              NodeList
                ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=Ground]]]
                  NodeList
                    InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                      Identifier [name=x]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                      Identifier [name=y]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]]
                      Identifier [name=x]
                      Identifier [name=sz]
                    InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]
                      Identifier [name=y]
                      Identifier [name=sz]
                    Identifier [name=Ground]
                ProcedureCall [procedureName=MakeLink, arguments=[Identifier [name=x], Identifier [name=y], Identifier [name=sz], Identifier [name=angle], Identifier [name=Ground2]]]
                  NodeList
                    Identifier [name=x]
                    Identifier [name=y]
                    Identifier [name=sz]
                    Identifier [name=angle]
                    Identifier [name=Ground2]
                ProcedureCall [procedureName=DEC, arguments=[Identifier [name=sz]]]
                  NodeList
                    Identifier [name=sz]
                IfStatement [condition=Identifier [name=dualpf], thenStatements=[ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=BackNone]]]], elseifs=[], elseStatements=[]]
                  Identifier [name=dualpf]
                  NodeList
                    ProcedureCall [procedureName=Fill, arguments=[InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]], InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]], Identifier [name=BackNone]]]
                      NodeList
                        InfixOpExpression [left=Identifier [name=x], operator="-", right=Identifier [name=sz]]
                          Identifier [name=x]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=y], operator="-", right=Identifier [name=sz]]
                          Identifier [name=y]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=x], operator="+", right=Identifier [name=sz]]
                          Identifier [name=x]
                          Identifier [name=sz]
                        InfixOpExpression [left=Identifier [name=y], operator="+", right=Identifier [name=sz]]
                          Identifier [name=y]
                          Identifier [name=sz]
                        Identifier [name=BackNone]
        ProcedureCall [procedureName=FillRandom, arguments=[ConstantLiteral [value=0], ConstantLiteral [value=0], ConstantLiteral [value=59], ConstantLiteral [value=59], Identifier [name=Forest1], Identifier [name=Forest7], Identifier [name=OnlyWall], Identifier [name=Rnd]]]
          NodeList
            ConstantLiteral [value=0]
            ConstantLiteral [value=0]
            ConstantLiteral [value=59]
            ConstantLiteral [value=59]
            Identifier [name=Forest1]
            Identifier [name=Forest7]
            Identifier [name=OnlyWall]
            Identifier [name=Rnd]
        ForLoop [identifier=Identifier [name=c], fromExpression=ConstantLiteral [value=0], toExpression=ConstantLiteral [value=15], byExpression=null, statements=[IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien1L]], thenStatements=[ProcedureCall [procedureName=RndRect, arguments=[]], ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=c], Identifier [name=pLife4], ConstantLiteral [value=4]]], ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=c], Identifier [name=pLife4], ConstantLiteral [value=1]]]], elseifs=[ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien1S]], statements=[ProcedureCall [procedureName=RndRect, arguments=[]], ProcedureCall [procedureName=PutRAlien1, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=4]]], ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutRAlien1, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=1]]]]]], elseStatements=[]], IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien2L]], thenStatements=[IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien2B]], thenStatements=[Assignement [target=Identifier [name=lf], value=InfixOpExpression [left=ConstantLiteral [value=70], operator="+", right=InfixOpExpression [left=Identifier [name=difficulty], operator="*", right=ConstantLiteral [value=3]]]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=lf], value=Identifier [name=pLife4]]]], ProcedureCall [procedureName=RndRect, arguments=[]], ProcedureCall [procedureName=PutAlien2, arguments=[Identifier [name=c], Identifier [name=lf], ConstantLiteral [value=5]]], ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutAlien2, arguments=[Identifier [name=c], Identifier [name=lf], ConstantLiteral [value=1]]]], elseifs=[ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien2S]], statements=[ProcedureCall [procedureName=RndRect, arguments=[]], ProcedureCall [procedureName=PutRAlien2, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=4]]], ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutRAlien2, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=1]]]]]], elseStatements=[]], IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=DObjs]], thenStatements=[ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutIsolatedObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=0], ConstantLiteral [value=4]]]], elseifs=[], elseStatements=[]], IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Machines]], thenStatements=[ProcedureCall [procedureName=RndRect, arguments=[]], ProcedureCall [procedureName=PutMachine, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=4]]]], elseifs=[], elseStatements=[]], IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=TBonus]], thenStatements=[ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=c], ConstantLiteral [value=1]]]], elseifs=[], elseStatements=[]]]]
          ConstantLiteral [value=0]
          ConstantLiteral [value=15]
          NodeList
            IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien1L]], thenStatements=[ProcedureCall [procedureName=RndRect, arguments=[]], ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=c], Identifier [name=pLife4], ConstantLiteral [value=4]]], ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=c], Identifier [name=pLife4], ConstantLiteral [value=1]]]], elseifs=[ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien1S]], statements=[ProcedureCall [procedureName=RndRect, arguments=[]], ProcedureCall [procedureName=PutRAlien1, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=4]]], ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutRAlien1, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=1]]]]]], elseStatements=[]]
              InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien1L]]
                Identifier [name=c]
                Identifier [name=Alien1L]
              NodeList
                ProcedureCall [procedureName=RndRect, arguments=[]]
                ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=c], Identifier [name=pLife4], ConstantLiteral [value=4]]]
                  NodeList
                    Identifier [name=c]
                    Identifier [name=pLife4]
                    ConstantLiteral [value=4]
                ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
                  NodeList
                    ConstantLiteral [value=1]
                    ConstantLiteral [value=1]
                    ConstantLiteral [value=58]
                    ConstantLiteral [value=58]
                ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=c], Identifier [name=pLife4], ConstantLiteral [value=1]]]
                  NodeList
                    Identifier [name=c]
                    Identifier [name=pLife4]
                    ConstantLiteral [value=1]
              ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien1S]], statements=[ProcedureCall [procedureName=RndRect, arguments=[]], ProcedureCall [procedureName=PutRAlien1, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=4]]], ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutRAlien1, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=1]]]]]
                InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien1S]]
                  Identifier [name=c]
                  Identifier [name=Alien1S]
                NodeList
                  ProcedureCall [procedureName=RndRect, arguments=[]]
                  ProcedureCall [procedureName=PutRAlien1, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=4]]]
                    NodeList
                      Identifier [name=c]
                      ConstantLiteral [value=0]
                      ConstantLiteral [value=3]
                      ConstantLiteral [value=4]
                  ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
                    NodeList
                      ConstantLiteral [value=1]
                      ConstantLiteral [value=1]
                      ConstantLiteral [value=58]
                      ConstantLiteral [value=58]
                  ProcedureCall [procedureName=PutRAlien1, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=1]]]
                    NodeList
                      Identifier [name=c]
                      ConstantLiteral [value=0]
                      ConstantLiteral [value=3]
                      ConstantLiteral [value=1]
            IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien2L]], thenStatements=[IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien2B]], thenStatements=[Assignement [target=Identifier [name=lf], value=InfixOpExpression [left=ConstantLiteral [value=70], operator="+", right=InfixOpExpression [left=Identifier [name=difficulty], operator="*", right=ConstantLiteral [value=3]]]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=lf], value=Identifier [name=pLife4]]]], ProcedureCall [procedureName=RndRect, arguments=[]], ProcedureCall [procedureName=PutAlien2, arguments=[Identifier [name=c], Identifier [name=lf], ConstantLiteral [value=5]]], ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutAlien2, arguments=[Identifier [name=c], Identifier [name=lf], ConstantLiteral [value=1]]]], elseifs=[ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien2S]], statements=[ProcedureCall [procedureName=RndRect, arguments=[]], ProcedureCall [procedureName=PutRAlien2, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=4]]], ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutRAlien2, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=1]]]]]], elseStatements=[]]
              InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien2L]]
                Identifier [name=c]
                Identifier [name=Alien2L]
              NodeList
                IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien2B]], thenStatements=[Assignement [target=Identifier [name=lf], value=InfixOpExpression [left=ConstantLiteral [value=70], operator="+", right=InfixOpExpression [left=Identifier [name=difficulty], operator="*", right=ConstantLiteral [value=3]]]]], elseifs=[], elseStatements=[Assignement [target=Identifier [name=lf], value=Identifier [name=pLife4]]]]
                  InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien2B]]
                    Identifier [name=c]
                    Identifier [name=Alien2B]
                  NodeList
                    Assignement [target=Identifier [name=lf], value=InfixOpExpression [left=ConstantLiteral [value=70], operator="+", right=InfixOpExpression [left=Identifier [name=difficulty], operator="*", right=ConstantLiteral [value=3]]]]
                      Identifier [name=lf]
                      InfixOpExpression [left=ConstantLiteral [value=70], operator="+", right=InfixOpExpression [left=Identifier [name=difficulty], operator="*", right=ConstantLiteral [value=3]]]
                        ConstantLiteral [value=70]
                        InfixOpExpression [left=Identifier [name=difficulty], operator="*", right=ConstantLiteral [value=3]]
                          Identifier [name=difficulty]
                          ConstantLiteral [value=3]
                  NodeList
                    Assignement [target=Identifier [name=lf], value=Identifier [name=pLife4]]
                      Identifier [name=lf]
                      Identifier [name=pLife4]
                ProcedureCall [procedureName=RndRect, arguments=[]]
                ProcedureCall [procedureName=PutAlien2, arguments=[Identifier [name=c], Identifier [name=lf], ConstantLiteral [value=5]]]
                  NodeList
                    Identifier [name=c]
                    Identifier [name=lf]
                    ConstantLiteral [value=5]
                ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
                  NodeList
                    ConstantLiteral [value=1]
                    ConstantLiteral [value=1]
                    ConstantLiteral [value=58]
                    ConstantLiteral [value=58]
                ProcedureCall [procedureName=PutAlien2, arguments=[Identifier [name=c], Identifier [name=lf], ConstantLiteral [value=1]]]
                  NodeList
                    Identifier [name=c]
                    Identifier [name=lf]
                    ConstantLiteral [value=1]
              ElseIfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien2S]], statements=[ProcedureCall [procedureName=RndRect, arguments=[]], ProcedureCall [procedureName=PutRAlien2, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=4]]], ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutRAlien2, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=1]]]]]
                InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Alien2S]]
                  Identifier [name=c]
                  Identifier [name=Alien2S]
                NodeList
                  ProcedureCall [procedureName=RndRect, arguments=[]]
                  ProcedureCall [procedureName=PutRAlien2, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=4]]]
                    NodeList
                      Identifier [name=c]
                      ConstantLiteral [value=0]
                      ConstantLiteral [value=3]
                      ConstantLiteral [value=4]
                  ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
                    NodeList
                      ConstantLiteral [value=1]
                      ConstantLiteral [value=1]
                      ConstantLiteral [value=58]
                      ConstantLiteral [value=58]
                  ProcedureCall [procedureName=PutRAlien2, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=1]]]
                    NodeList
                      Identifier [name=c]
                      ConstantLiteral [value=0]
                      ConstantLiteral [value=3]
                      ConstantLiteral [value=1]
            IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=DObjs]], thenStatements=[ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutIsolatedObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=0], ConstantLiteral [value=4]]]], elseifs=[], elseStatements=[]]
              InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=DObjs]]
                Identifier [name=c]
                Identifier [name=DObjs]
              NodeList
                ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
                  NodeList
                    ConstantLiteral [value=1]
                    ConstantLiteral [value=1]
                    ConstantLiteral [value=58]
                    ConstantLiteral [value=58]
                ProcedureCall [procedureName=PutIsolatedObjs, arguments=[Identifier [name=DEADOBJ], Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=3], ConstantLiteral [value=0], ConstantLiteral [value=4]]]
                  NodeList
                    Identifier [name=DEADOBJ]
                    Identifier [name=c]
                    ConstantLiteral [value=0]
                    ConstantLiteral [value=3]
                    ConstantLiteral [value=0]
                    ConstantLiteral [value=4]
            IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Machines]], thenStatements=[ProcedureCall [procedureName=RndRect, arguments=[]], ProcedureCall [procedureName=PutMachine, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=4]]]], elseifs=[], elseStatements=[]]
              InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=Machines]]
                Identifier [name=c]
                Identifier [name=Machines]
              NodeList
                ProcedureCall [procedureName=RndRect, arguments=[]]
                ProcedureCall [procedureName=PutMachine, arguments=[Identifier [name=c], ConstantLiteral [value=0], ConstantLiteral [value=1], ConstantLiteral [value=4]]]
                  NodeList
                    Identifier [name=c]
                    ConstantLiteral [value=0]
                    ConstantLiteral [value=1]
                    ConstantLiteral [value=4]
            IfStatement [condition=InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=TBonus]], thenStatements=[ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]], ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=c], ConstantLiteral [value=1]]]], elseifs=[], elseStatements=[]]
              InfixOpExpression [left=Identifier [name=c], operator="IN", right=Identifier [name=TBonus]]
                Identifier [name=c]
                Identifier [name=TBonus]
              NodeList
                ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
                  NodeList
                    ConstantLiteral [value=1]
                    ConstantLiteral [value=1]
                    ConstantLiteral [value=58]
                    ConstantLiteral [value=58]
                ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=c], ConstantLiteral [value=1]]]
                  NodeList
                    Identifier [name=c]
                    ConstantLiteral [value=1]
        ProcedureCall [procedureName=Rect, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
        ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbHelp], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=tbHelp]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbBomb], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=tbBomb]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutTBonus, arguments=[Identifier [name=tbBonusLevel], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=tbBonusLevel]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutHospital, arguments=[ConstantLiteral [value=8]]]
          NodeList
            ConstantLiteral [value=8]
        ProcedureCall [procedureName=PutBullet, arguments=[ConstantLiteral [value=8]]]
          NodeList
            ConstantLiteral [value=8]
        ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=aBigDrawer], ConstantLiteral [value=0], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=aBigDrawer]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=PutAlien1, arguments=[Identifier [name=aSmallDrawer], ConstantLiteral [value=0], ConstantLiteral [value=1]]]
          NodeList
            Identifier [name=aSmallDrawer]
            ConstantLiteral [value=0]
            ConstantLiteral [value=1]
        ProcedureCall [procedureName=AddOptions, arguments=[ConstantLiteral [value=1], ConstantLiteral [value=1], ConstantLiteral [value=58], ConstantLiteral [value=58], ConstantLiteral [value=3], ConstantLiteral [value=3], ConstantLiteral [value=3], ConstantLiteral [value=3], ConstantLiteral [value=3], ConstantLiteral [value=3], ConstantLiteral [value=3]]]
          NodeList
            ConstantLiteral [value=1]
            ConstantLiteral [value=1]
            ConstantLiteral [value=58]
            ConstantLiteral [value=58]
            ConstantLiteral [value=3]
            ConstantLiteral [value=3]
            ConstantLiteral [value=3]
            ConstantLiteral [value=3]
            ConstantLiteral [value=3]
            ConstantLiteral [value=3]
            ConstantLiteral [value=3]
  NodeList
  NodeList

